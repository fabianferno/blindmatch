{
  "address": "0x63Aa67277562f450f9EBF1027C4F7500F82a6cA4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "got",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "expected",
          "type": "uint8"
        }
      ],
      "name": "InvalidEncryptedInput",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int32",
          "name": "value",
          "type": "int32"
        }
      ],
      "name": "SecurityZoneOutOfBounds",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isMatch",
          "type": "bool"
        }
      ],
      "name": "MatchDecrypted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "MatchDecryptionRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MatchFound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "MatchRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ProfileCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "score",
          "type": "uint8"
        }
      ],
      "name": "ScoreDecrypted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "ScoreDecryptionRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "SimilarityCalculated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MATCH_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_INTERESTS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_INTERESTS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allUsers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        }
      ],
      "name": "batchCalculateSimilarity",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "requestIds",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "targetUser",
          "type": "address"
        }
      ],
      "name": "calculateSimilarity",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deleteProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getMatchCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "getMatchRequest",
      "outputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "processed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "scoreDecrypted",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "decryptedScore",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "matchDecrypted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isMatch",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyMatches",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalUsers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasProfile",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user2",
          "type": "address"
        }
      ],
      "name": "isAlreadyMatched",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "matchRequests",
      "outputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "euint8",
          "name": "similarityScore",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "scoreDecrypted",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "decryptedScore",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "processed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "ebool",
          "name": "isMatchEncrypted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "matchDecrypted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isMatch",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "processMatchDecryption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "processScoreDecryption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "profiles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "euint8",
          "name": "interestsBitmap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "profileCreatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "requestMatchDecryption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "requestScoreDecryption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ctHash",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "securityZone",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "utype",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct InEuint8",
          "name": "encryptedInterests",
          "type": "tuple"
        }
      ],
      "name": "submitProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc09777221844c2ea592587fd5a91404ca429e5104a3f62acd83836ebd34b8a1",
  "receipt": {
    "to": null,
    "from": "0x4b4b30e2E7c6463b03CdFFD6c42329D357205334",
    "contractAddress": "0x63Aa67277562f450f9EBF1027C4F7500F82a6cA4",
    "transactionIndex": 1,
    "gasUsed": "2035708",
    "logsBloom": "0x
    "blockHash": "0x071ba006c16aca9748b58f814c139fb52734580a6681b6775a53c43ef5e8883c",
    "transactionHash": "0xfc09777221844c2ea592587fd5a91404ca429e5104a3f62acd83836ebd34b8a1",
    "logs": [],
    "blockNumber": 163762056,
    "cumulativeGasUsed": "2035708",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "50f5887698574817359fb008ad023395",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"got\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"expected\",\"type\":\"uint8\"}],\"name\":\"InvalidEncryptedInput\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int32\",\"name\":\"value\",\"type\":\"int32\"}],\"name\":\"SecurityZoneOutOfBounds\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMatch\",\"type\":\"bool\"}],\"name\":\"MatchDecrypted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"MatchDecryptionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MatchFound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"MatchRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProfileCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"score\",\"type\":\"uint8\"}],\"name\":\"ScoreDecrypted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"ScoreDecryptionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"SimilarityCalculated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MATCH_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_INTERESTS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_INTERESTS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"}],\"name\":\"batchCalculateSimilarity\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"requestIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetUser\",\"type\":\"address\"}],\"name\":\"calculateSimilarity\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMatchCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"getMatchRequest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"processed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"scoreDecrypted\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decryptedScore\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"matchDecrypted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMatch\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyMatches\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasProfile\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user2\",\"type\":\"address\"}],\"name\":\"isAlreadyMatched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"matchRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"euint8\",\"name\":\"similarityScore\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"scoreDecrypted\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decryptedScore\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"processed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"ebool\",\"name\":\"isMatchEncrypted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"matchDecrypted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMatch\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"processMatchDecryption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"processScoreDecryption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"profiles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"euint8\",\"name\":\"interestsBitmap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profileCreatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"requestMatchDecryption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"requestScoreDecryption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ctHash\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"securityZone\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"utype\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct InEuint8\",\"name\":\"encryptedInterests\",\"type\":\"tuple\"}],\"name\":\"submitProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchCalculateSimilarity(address[])\":{\"details\":\"Batch similarity calculation for multiple users\",\"params\":{\"targets\":\"Array of user addresses to calculate similarity with\"},\"returns\":{\"requestIds\":\"Array of match request IDs for each target\"}},\"calculateSimilarity(address)\":{\"details\":\"Calculate similarity between two users using encrypted bitwise operations\",\"params\":{\"targetUser\":\"Address of the user to compare with\"},\"returns\":{\"requestId\":\"The ID of the match request\"}},\"deleteProfile()\":{\"details\":\"Emergency function to remove a user's profile\"},\"getAllUsers()\":{\"details\":\"Get all registered users\",\"returns\":{\"_0\":\"Array of all user addresses\"}},\"getMatchCount(address)\":{\"details\":\"Get match count for a user\",\"params\":{\"user\":\"Address to check\"},\"returns\":{\"_0\":\"Number of matches\"}},\"getMatchRequest(bytes32)\":{\"details\":\"Get match request details\",\"params\":{\"requestId\":\"The request ID\"},\"returns\":{\"decryptedScore\":\"The decrypted similarity score\",\"isMatch\":\"Whether the match result is true\",\"matchDecrypted\":\"Whether the match result has been decrypted\",\"processed\":\"Whether the match request has been processed\",\"requester\":\"The address of the requester\",\"scoreDecrypted\":\"Whether the similarity score has been decrypted\",\"target\":\"The address of the target\",\"timestamp\":\"The timestamp of the match request\"}},\"getMyMatches()\":{\"details\":\"Get user's matches (only callable by the user themselves)\",\"returns\":{\"_0\":\"Array of addresses that matched with the caller\"}},\"getTotalUsers()\":{\"details\":\"Get total number of registered users\",\"returns\":{\"_0\":\"Total user count\"}},\"hasProfile(address)\":{\"details\":\"Check if a user has a profile\",\"params\":{\"user\":\"Address to check\"},\"returns\":{\"_0\":\"True if user has a profile\"}},\"isAlreadyMatched(address,address)\":{\"details\":\"Check if two users are already matched\",\"params\":{\"user1\":\"First user address\",\"user2\":\"Second user address\"},\"returns\":{\"_0\":\"True if users are already matched\"}},\"processMatchDecryption(bytes32)\":{\"details\":\"Retrieve and process decrypted match result\",\"params\":{\"requestId\":\"The ID of the match request\"}},\"processScoreDecryption(bytes32)\":{\"details\":\"Retrieve and process decrypted similarity score\",\"params\":{\"requestId\":\"The ID of the match request\"}},\"requestMatchDecryption(bytes32)\":{\"details\":\"Request decryption of match result (whether users match)\",\"params\":{\"requestId\":\"The ID of the match request\"}},\"requestScoreDecryption(bytes32)\":{\"details\":\"Request decryption of similarity score\",\"params\":{\"requestId\":\"The ID of the match request\"}},\"submitProfile((uint256,uint8,uint8,bytes))\":{\"details\":\"Submit user profile with encrypted interests bitmap\",\"params\":{\"encryptedInterests\":\"8-bit encrypted bitmap representing user's interests\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BlindMatch.sol\":\"BlindMatch\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@fhenixprotocol/cofhe-contracts/FHE.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause-Clear\\n// solhint-disable one-contract-per-file\\n\\npragma solidity >=0.8.19 <0.9.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {FunctionId, ITaskManager, Utils, EncryptedInput, InEbool, InEuint8, InEuint16, InEuint32, InEuint64, InEuint128, InEuint256, InEaddress} from \\\"./ICofhe.sol\\\";\\n\\ntype ebool is uint256;\\ntype euint8 is uint256;\\ntype euint16 is uint256;\\ntype euint32 is uint256;\\ntype euint64 is uint256;\\ntype euint128 is uint256;\\ntype euint256 is uint256;\\ntype eaddress is uint256;\\n\\n// ================================\\n// \\\\/ \\\\/ \\\\/ \\\\/ \\\\/ \\\\/ \\\\/ \\\\/ \\\\/ \\\\/ \\\\/\\n// TODO : CHANGE ME AFTER DEPLOYING\\n// /\\\\ /\\\\ /\\\\ /\\\\ /\\\\ /\\\\ /\\\\ /\\\\ /\\\\ /\\\\ /\\\\\\n// ================================\\n//solhint-disable const-name-snakecase\\naddress constant TASK_MANAGER_ADDRESS = 0xeA30c4B8b44078Bbf8a6ef5b9f1eC1626C7848D9;\\n\\nlibrary Common {\\n    error InvalidHexCharacter(bytes1 char);\\n    error SecurityZoneOutOfBounds(int32 value);\\n\\n    // Default value for temp hash calculation in unary operations\\n    string private constant DEFAULT_VALUE = \\\"0\\\";\\n\\n    function convertInt32ToUint256(int32 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SecurityZoneOutOfBounds(value);\\n        }\\n        return uint256(uint32(value));\\n    }\\n\\n    function isInitialized(uint256 hash) internal pure returns (bool) {\\n        return hash != 0;\\n    }\\n\\n    // Return true if the encrypted integer is initialized and false otherwise.\\n    function isInitialized(ebool v) internal pure returns (bool) {\\n        return isInitialized(ebool.unwrap(v));\\n    }\\n\\n    // Return true if the encrypted integer is initialized and false otherwise.\\n    function isInitialized(euint8 v) internal pure returns (bool) {\\n        return isInitialized(euint8.unwrap(v));\\n    }\\n\\n    // Return true if the encrypted integer is initialized and false otherwise.\\n    function isInitialized(euint16 v) internal pure returns (bool) {\\n        return isInitialized(euint16.unwrap(v));\\n    }\\n\\n    // Return true if the encrypted integer is initialized and false otherwise.\\n    function isInitialized(euint32 v) internal pure returns (bool) {\\n        return isInitialized(euint32.unwrap(v));\\n    }\\n\\n    // Return true if the encrypted integer is initialized and false otherwise.\\n    function isInitialized(euint64 v) internal pure returns (bool) {\\n        return isInitialized(euint64.unwrap(v));\\n    }\\n\\n    // Return true if the encrypted integer is initialized and false otherwise.\\n    function isInitialized(euint128 v) internal pure returns (bool) {\\n        return isInitialized(euint128.unwrap(v));\\n    }\\n\\n    // Return true if the encrypted integer is initialized and false otherwise.\\n    function isInitialized(euint256 v) internal pure returns (bool) {\\n        return isInitialized(euint256.unwrap(v));\\n    }\\n\\n    function isInitialized(eaddress v) internal pure returns (bool) {\\n        return isInitialized(eaddress.unwrap(v));\\n    }\\n\\n    function createUint256Inputs(uint256 input1) internal pure returns (uint256[] memory) {\\n        uint256[] memory inputs = new uint256[](1);\\n        inputs[0] = input1;\\n        return inputs;\\n    }\\n\\n    function createUint256Inputs(uint256 input1, uint256 input2) internal pure returns (uint256[] memory) {\\n        uint256[] memory inputs = new uint256[](2);\\n        inputs[0] = input1;\\n        inputs[1] = input2;\\n        return inputs;\\n    }\\n\\n    function createUint256Inputs(uint256 input1, uint256 input2, uint256 input3) internal pure returns (uint256[] memory) {\\n        uint256[] memory inputs = new uint256[](3);\\n        inputs[0] = input1;\\n        inputs[1] = input2;\\n        inputs[2] = input3;\\n        return inputs;\\n    }\\n}\\n\\nlibrary Impl {\\n    function trivialEncrypt(uint256 value, uint8 toType, int32 securityZone) internal returns (uint256) {\\n        return ITaskManager(TASK_MANAGER_ADDRESS).createTask(toType, FunctionId.trivialEncrypt, new uint256[](0), Common.createUint256Inputs(value, toType, Common.convertInt32ToUint256(securityZone)));\\n    }\\n\\n    function cast(uint256 key, uint8 toType) internal returns (uint256) {\\n        return ITaskManager(TASK_MANAGER_ADDRESS).createTask(toType, FunctionId.cast, Common.createUint256Inputs(key), Common.createUint256Inputs(toType));\\n    }\\n\\n    function select(uint8 returnType, ebool control, uint256 ifTrue, uint256 ifFalse) internal returns (uint256 result) {\\n        return ITaskManager(TASK_MANAGER_ADDRESS).createTask(returnType,\\n            FunctionId.select,\\n            Common.createUint256Inputs(ebool.unwrap(control), ifTrue, ifFalse),\\n            new uint256[](0));\\n    }\\n\\n    function mathOp(uint8 returnType, uint256 lhs, uint256 rhs, FunctionId functionId) internal returns (uint256) {\\n        return ITaskManager(TASK_MANAGER_ADDRESS).createTask(returnType, functionId, Common.createUint256Inputs(lhs, rhs), new uint256[](0));\\n    }\\n\\n    function decrypt(uint256 input) internal returns (uint256) {\\n        ITaskManager(TASK_MANAGER_ADDRESS).createDecryptTask(input, msg.sender);\\n        return input;\\n    }\\n\\n    function getDecryptResult(uint256 input) internal view returns (uint256) {\\n        return ITaskManager(TASK_MANAGER_ADDRESS).getDecryptResult(input);\\n    }\\n\\n    function getDecryptResultSafe(uint256 input) internal view returns (uint256 result, bool decrypted) {\\n        return ITaskManager(TASK_MANAGER_ADDRESS).getDecryptResultSafe(input);\\n    }\\n\\n    function not(uint8 returnType, uint256 input) internal returns (uint256) {\\n        return ITaskManager(TASK_MANAGER_ADDRESS).createTask(returnType, FunctionId.not, Common.createUint256Inputs(input), new uint256[](0));\\n    }\\n\\n    function square(uint8 returnType, uint256 input) internal returns (uint256) {\\n        return ITaskManager(TASK_MANAGER_ADDRESS).createTask(returnType, FunctionId.square, Common.createUint256Inputs(input), new uint256[](0));\\n    }\\n\\n    function verifyInput(EncryptedInput memory input) internal returns (uint256) {\\n        return ITaskManager(TASK_MANAGER_ADDRESS).verifyInput(input, msg.sender);\\n    }\\n\\n    /// @notice Generates a random value of a given type with the given seed, for the provided securityZone\\n    /// @dev Calls the desired function\\n    /// @param uintType the type of the random value to generate\\n    /// @param seed the seed to use to create a random value from\\n    /// @param securityZone the security zone to use for the random value\\n    function random(uint8 uintType, uint64 seed, int32 securityZone) internal returns (uint256) {\\n        return ITaskManager(TASK_MANAGER_ADDRESS).createTask(uintType, FunctionId.random, new uint256[](0), Common.createUint256Inputs(seed, Common.convertInt32ToUint256(securityZone)));\\n    }\\n\\n    /// @notice Generates a random value of a given type with the given seed\\n    /// @dev Calls the desired function\\n    /// @param uintType the type of the random value to generate\\n    /// @param seed the seed to use to create a random value from\\n    function random(uint8 uintType, uint32 seed) internal returns (uint256) {\\n        return random(uintType, seed, 0);\\n    }\\n\\n    /// @notice Generates a random value of a given type\\n    /// @dev Calls the desired function\\n    /// @param uintType the type of the random value to generate\\n    function random(uint8 uintType) internal returns (uint256) {\\n        return random(uintType, 0, 0);\\n    }\\n\\n}\\n\\nlibrary FHE {\\n\\n    error InvalidEncryptedInput(uint8 got, uint8 expected);\\n    /// @notice Perform the addition operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted addition\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type euint8 containing the addition result\\n    function add(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return euint8.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.add));\\n    }\\n\\n    /// @notice Perform the addition operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted addition\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type euint16 containing the addition result\\n    function add(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return euint16.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.add));\\n    }\\n\\n    /// @notice Perform the addition operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted addition\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type euint32 containing the addition result\\n    function add(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return euint32.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.add));\\n    }\\n\\n    /// @notice Perform the addition operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted addition\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type euint64 containing the addition result\\n    function add(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return euint64.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.add));\\n    }\\n\\n    /// @notice Perform the addition operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted addition\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type euint128 containing the addition result\\n    function add(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return euint128.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.add));\\n    }\\n\\n    /// @notice Perform the addition operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted addition\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type euint256 containing the addition result\\n    function add(euint256 lhs, euint256 rhs) internal returns (euint256) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return euint256.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.add));\\n    }\\n\\n    /// @notice Perform the less than or equal to operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type ebool containing the comparison result\\n    function lte(euint8 lhs, euint8 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.lte));\\n    }\\n\\n    /// @notice Perform the less than or equal to operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type ebool containing the comparison result\\n    function lte(euint16 lhs, euint16 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.lte));\\n    }\\n\\n    /// @notice Perform the less than or equal to operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type ebool containing the comparison result\\n    function lte(euint32 lhs, euint32 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.lte));\\n    }\\n\\n    /// @notice Perform the less than or equal to operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type ebool containing the comparison result\\n    function lte(euint64 lhs, euint64 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.lte));\\n    }\\n\\n    /// @notice Perform the less than or equal to operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type ebool containing the comparison result\\n    function lte(euint128 lhs, euint128 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.lte));\\n    }\\n\\n    /// @notice Perform the less than or equal to operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type ebool containing the comparison result\\n    function lte(euint256 lhs, euint256 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.lte));\\n    }\\n\\n    /// @notice Perform the subtraction operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted subtraction\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type euint8 containing the subtraction result\\n    function sub(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return euint8.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.sub));\\n    }\\n\\n    /// @notice Perform the subtraction operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted subtraction\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type euint16 containing the subtraction result\\n    function sub(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return euint16.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.sub));\\n    }\\n\\n    /// @notice Perform the subtraction operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted subtraction\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type euint32 containing the subtraction result\\n    function sub(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return euint32.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.sub));\\n    }\\n\\n    /// @notice Perform the subtraction operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted subtraction\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type euint64 containing the subtraction result\\n    function sub(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return euint64.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.sub));\\n    }\\n\\n    /// @notice Perform the subtraction operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted subtraction\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type euint128 containing the subtraction result\\n    function sub(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return euint128.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.sub));\\n    }\\n\\n    /// @notice Perform the subtraction operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted subtraction\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type euint256 containing the subtraction result\\n    function sub(euint256 lhs, euint256 rhs) internal returns (euint256) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return euint256.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.sub));\\n    }\\n\\n    /// @notice Perform the multiplication operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted multiplication\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type euint8 containing the multiplication result\\n    function mul(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return euint8.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.mul));\\n    }\\n\\n    /// @notice Perform the multiplication operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted multiplication\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type euint16 containing the multiplication result\\n    function mul(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return euint16.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.mul));\\n    }\\n\\n    /// @notice Perform the multiplication operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted multiplication\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type euint32 containing the multiplication result\\n    function mul(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return euint32.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.mul));\\n    }\\n\\n    /// @notice Perform the multiplication operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted multiplication\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type euint64 containing the multiplication result\\n    function mul(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return euint64.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.mul));\\n    }\\n\\n    /// @notice Perform the multiplication operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted multiplication\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type euint128 containing the multiplication result\\n    function mul(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return euint128.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.mul));\\n    }\\n\\n    /// @notice Perform the multiplication operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted multiplication\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type euint256 containing the multiplication result\\n    function mul(euint256 lhs, euint256 rhs) internal returns (euint256) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return euint256.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.mul));\\n    }\\n\\n    /// @notice Perform the less than operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type ebool containing the comparison result\\n    function lt(euint8 lhs, euint8 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.lt));\\n    }\\n\\n    /// @notice Perform the less than operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type ebool containing the comparison result\\n    function lt(euint16 lhs, euint16 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.lt));\\n    }\\n\\n    /// @notice Perform the less than operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type ebool containing the comparison result\\n    function lt(euint32 lhs, euint32 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.lt));\\n    }\\n\\n    /// @notice Perform the less than operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type ebool containing the comparison result\\n    function lt(euint64 lhs, euint64 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.lt));\\n    }\\n\\n    /// @notice Perform the less than operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type ebool containing the comparison result\\n    function lt(euint128 lhs, euint128 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.lt));\\n    }\\n\\n    /// @notice Perform the less than operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type ebool containing the comparison result\\n    function lt(euint256 lhs, euint256 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.lt));\\n    }\\n\\n    /// @notice Perform the division operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted division\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type euint8 containing the division result\\n    function div(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return euint8.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.div));\\n    }\\n\\n    /// @notice Perform the division operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted division\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type euint16 containing the division result\\n    function div(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return euint16.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.div));\\n    }\\n\\n    /// @notice Perform the division operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted division\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type euint32 containing the division result\\n    function div(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return euint32.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.div));\\n    }\\n\\n    /// @notice Perform the division operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted division\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type euint64 containing the division result\\n    function div(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return euint64.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.div));\\n    }\\n\\n    /// @notice Perform the division operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted division\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type euint128 containing the division result\\n    function div(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return euint128.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.div));\\n    }\\n\\n    /// @notice Perform the division operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted division\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type euint256 containing the division result\\n    function div(euint256 lhs, euint256 rhs) internal returns (euint256) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return euint256.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.div));\\n    }\\n\\n    /// @notice Perform the greater than operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type ebool containing the comparison result\\n    function gt(euint8 lhs, euint8 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.gt));\\n    }\\n\\n    /// @notice Perform the greater than operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type ebool containing the comparison result\\n    function gt(euint16 lhs, euint16 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.gt));\\n    }\\n\\n    /// @notice Perform the greater than operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type ebool containing the comparison result\\n    function gt(euint32 lhs, euint32 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.gt));\\n    }\\n\\n    /// @notice Perform the greater than operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type ebool containing the comparison result\\n    function gt(euint64 lhs, euint64 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.gt));\\n    }\\n\\n    /// @notice Perform the greater than operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type ebool containing the comparison result\\n    function gt(euint128 lhs, euint128 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.gt));\\n    }\\n\\n    /// @notice Perform the greater than operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type ebool containing the comparison result\\n    function gt(euint256 lhs, euint256 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.gt));\\n    }\\n\\n    /// @notice Perform the greater than or equal to operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type ebool containing the comparison result\\n    function gte(euint8 lhs, euint8 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.gte));\\n    }\\n\\n    /// @notice Perform the greater than or equal to operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type ebool containing the comparison result\\n    function gte(euint16 lhs, euint16 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.gte));\\n    }\\n\\n    /// @notice Perform the greater than or equal to operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type ebool containing the comparison result\\n    function gte(euint32 lhs, euint32 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.gte));\\n    }\\n\\n    /// @notice Perform the greater than or equal to operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type ebool containing the comparison result\\n    function gte(euint64 lhs, euint64 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.gte));\\n    }\\n\\n    /// @notice Perform the greater than or equal to operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type ebool containing the comparison result\\n    function gte(euint128 lhs, euint128 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.gte));\\n    }\\n\\n    /// @notice Perform the greater than or equal to operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted comparison\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type ebool containing the comparison result\\n    function gte(euint256 lhs, euint256 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.gte));\\n    }\\n\\n    /// @notice Perform the remainder operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted remainder calculation\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type euint8 containing the remainder result\\n    function rem(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return euint8.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.rem));\\n    }\\n\\n    /// @notice Perform the remainder operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted remainder calculation\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type euint16 containing the remainder result\\n    function rem(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return euint16.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.rem));\\n    }\\n\\n    /// @notice Perform the remainder operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted remainder calculation\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type euint32 containing the remainder result\\n    function rem(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return euint32.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.rem));\\n    }\\n\\n    /// @notice Perform the remainder operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted remainder calculation\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type euint64 containing the remainder result\\n    function rem(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return euint64.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.rem));\\n    }\\n\\n    /// @notice Perform the remainder operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted remainder calculation\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type euint128 containing the remainder result\\n    function rem(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return euint128.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.rem));\\n    }\\n\\n    /// @notice Perform the remainder operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted remainder calculation\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type euint256 containing the remainder result\\n    function rem(euint256 lhs, euint256 rhs) internal returns (euint256) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return euint256.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.rem));\\n    }\\n\\n    /// @notice Perform the bitwise AND operation on two parameters of type ebool\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise AND\\n    /// @param lhs input of type ebool\\n    /// @param rhs second input of type ebool\\n    /// @return result of type ebool containing the AND result\\n    function and(ebool lhs, ebool rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEbool(true);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEbool(true);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EBOOL_TFHE, ebool.unwrap(lhs), ebool.unwrap(rhs), FunctionId.and));\\n    }\\n\\n    /// @notice Perform the bitwise AND operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise AND\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type euint8 containing the AND result\\n    function and(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return euint8.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.and));\\n    }\\n\\n    /// @notice Perform the bitwise AND operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise AND\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type euint16 containing the AND result\\n    function and(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return euint16.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.and));\\n    }\\n\\n    /// @notice Perform the bitwise AND operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise AND\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type euint32 containing the AND result\\n    function and(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return euint32.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.and));\\n    }\\n\\n    /// @notice Perform the bitwise AND operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise AND\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type euint64 containing the AND result\\n    function and(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return euint64.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.and));\\n    }\\n\\n    /// @notice Perform the bitwise AND operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise AND\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type euint128 containing the AND result\\n    function and(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return euint128.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.and));\\n    }\\n\\n    /// @notice Perform the bitwise AND operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise AND\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type euint256 containing the AND result\\n    function and(euint256 lhs, euint256 rhs) internal returns (euint256) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return euint256.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.and));\\n    }\\n\\n    /// @notice Perform the bitwise OR operation on two parameters of type ebool\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise OR\\n    /// @param lhs input of type ebool\\n    /// @param rhs second input of type ebool\\n    /// @return result of type ebool containing the OR result\\n    function or(ebool lhs, ebool rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEbool(true);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEbool(true);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EBOOL_TFHE, ebool.unwrap(lhs), ebool.unwrap(rhs), FunctionId.or));\\n    }\\n\\n    /// @notice Perform the bitwise OR operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise OR\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type euint8 containing the OR result\\n    function or(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return euint8.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.or));\\n    }\\n\\n    /// @notice Perform the bitwise OR operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise OR\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type euint16 containing the OR result\\n    function or(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return euint16.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.or));\\n    }\\n\\n    /// @notice Perform the bitwise OR operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise OR\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type euint32 containing the OR result\\n    function or(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return euint32.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.or));\\n    }\\n\\n    /// @notice Perform the bitwise OR operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise OR\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type euint64 containing the OR result\\n    function or(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return euint64.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.or));\\n    }\\n\\n    /// @notice Perform the bitwise OR operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise OR\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type euint128 containing the OR result\\n    function or(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return euint128.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.or));\\n    }\\n\\n    /// @notice Perform the bitwise OR operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise OR\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type euint256 containing the OR result\\n    function or(euint256 lhs, euint256 rhs) internal returns (euint256) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return euint256.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.or));\\n    }\\n\\n    /// @notice Perform the bitwise XOR operation on two parameters of type ebool\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise XOR\\n    /// @param lhs input of type ebool\\n    /// @param rhs second input of type ebool\\n    /// @return result of type ebool containing the XOR result\\n    function xor(ebool lhs, ebool rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEbool(true);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEbool(true);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EBOOL_TFHE, ebool.unwrap(lhs), ebool.unwrap(rhs), FunctionId.xor));\\n    }\\n\\n    /// @notice Perform the bitwise XOR operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise XOR\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type euint8 containing the XOR result\\n    function xor(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return euint8.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.xor));\\n    }\\n\\n    /// @notice Perform the bitwise XOR operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise XOR\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type euint16 containing the XOR result\\n    function xor(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return euint16.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.xor));\\n    }\\n\\n    /// @notice Perform the bitwise XOR operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise XOR\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type euint32 containing the XOR result\\n    function xor(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return euint32.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.xor));\\n    }\\n\\n    /// @notice Perform the bitwise XOR operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise XOR\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type euint64 containing the XOR result\\n    function xor(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return euint64.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.xor));\\n    }\\n\\n    /// @notice Perform the bitwise XOR operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise XOR\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type euint128 containing the XOR result\\n    function xor(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return euint128.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.xor));\\n    }\\n\\n    /// @notice Perform the bitwise XOR operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted bitwise XOR\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type euint256 containing the XOR result\\n    function xor(euint256 lhs, euint256 rhs) internal returns (euint256) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return euint256.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.xor));\\n    }\\n\\n    /// @notice Perform the equality operation on two parameters of type ebool\\n    /// @dev Verifies that inputs are initialized, performs encrypted equality check\\n    /// @param lhs input of type ebool\\n    /// @param rhs second input of type ebool\\n    /// @return result of type ebool containing the equality result\\n    function eq(ebool lhs, ebool rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEbool(true);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEbool(true);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EBOOL_TFHE, ebool.unwrap(lhs), ebool.unwrap(rhs), FunctionId.eq));\\n    }\\n\\n    /// @notice Perform the equality operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted equality check\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type ebool containing the equality result\\n    function eq(euint8 lhs, euint8 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.eq));\\n    }\\n\\n    /// @notice Perform the equality operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted equality check\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type ebool containing the equality result\\n    function eq(euint16 lhs, euint16 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.eq));\\n    }\\n\\n    /// @notice Perform the equality operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted equality check\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type ebool containing the equality result\\n    function eq(euint32 lhs, euint32 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.eq));\\n    }\\n\\n    /// @notice Perform the equality operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted equality check\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type ebool containing the equality result\\n    function eq(euint64 lhs, euint64 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.eq));\\n    }\\n\\n    /// @notice Perform the equality operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted equality check\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type ebool containing the equality result\\n    function eq(euint128 lhs, euint128 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.eq));\\n    }\\n\\n    /// @notice Perform the equality operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted equality check\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type ebool containing the equality result\\n    function eq(euint256 lhs, euint256 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.eq));\\n    }\\n\\n    /// @notice Perform the equality operation on two parameters of type eaddress\\n    /// @dev Verifies that inputs are initialized, performs encrypted equality check\\n    /// @param lhs input of type eaddress\\n    /// @param rhs second input of type eaddress\\n    /// @return result of type ebool containing the equality result\\n    function eq(eaddress lhs, eaddress rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEaddress(address(0));\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEaddress(address(0));\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EADDRESS_TFHE, eaddress.unwrap(lhs), eaddress.unwrap(rhs), FunctionId.eq));\\n    }\\n\\n    /// @notice Perform the inequality operation on two parameters of type ebool\\n    /// @dev Verifies that inputs are initialized, performs encrypted inequality check\\n    /// @param lhs input of type ebool\\n    /// @param rhs second input of type ebool\\n    /// @return result of type ebool containing the inequality result\\n    function ne(ebool lhs, ebool rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEbool(true);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEbool(true);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EBOOL_TFHE, ebool.unwrap(lhs), ebool.unwrap(rhs), FunctionId.ne));\\n    }\\n\\n    /// @notice Perform the inequality operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted inequality check\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type ebool containing the inequality result\\n    function ne(euint8 lhs, euint8 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.ne));\\n    }\\n\\n    /// @notice Perform the inequality operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted inequality check\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type ebool containing the inequality result\\n    function ne(euint16 lhs, euint16 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.ne));\\n    }\\n\\n    /// @notice Perform the inequality operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted inequality check\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type ebool containing the inequality result\\n    function ne(euint32 lhs, euint32 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.ne));\\n    }\\n\\n    /// @notice Perform the inequality operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted inequality check\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type ebool containing the inequality result\\n    function ne(euint64 lhs, euint64 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.ne));\\n    }\\n\\n    /// @notice Perform the inequality operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted inequality check\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type ebool containing the inequality result\\n    function ne(euint128 lhs, euint128 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.ne));\\n    }\\n\\n    /// @notice Perform the inequality operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted inequality check\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type ebool containing the inequality result\\n    function ne(euint256 lhs, euint256 rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.ne));\\n    }\\n\\n    /// @notice Perform the inequality operation on two parameters of type eaddress\\n    /// @dev Verifies that inputs are initialized, performs encrypted inequality check\\n    /// @param lhs input of type eaddress\\n    /// @param rhs second input of type eaddress\\n    /// @return result of type ebool containing the inequality result\\n    function ne(eaddress lhs, eaddress rhs) internal returns (ebool) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEaddress(address(0));\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEaddress(address(0));\\n        }\\n\\n        return ebool.wrap(Impl.mathOp(Utils.EADDRESS_TFHE, eaddress.unwrap(lhs), eaddress.unwrap(rhs), FunctionId.ne));\\n    }\\n\\n    /// @notice Perform the minimum operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted minimum comparison\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type euint8 containing the minimum value\\n    function min(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return euint8.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.min));\\n    }\\n\\n    /// @notice Perform the minimum operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted minimum comparison\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type euint16 containing the minimum value\\n    function min(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return euint16.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.min));\\n    }\\n\\n    /// @notice Perform the minimum operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted minimum comparison\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type euint32 containing the minimum value\\n    function min(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return euint32.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.min));\\n    }\\n\\n    /// @notice Perform the minimum operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted minimum comparison\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type euint64 containing the minimum value\\n    function min(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return euint64.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.min));\\n    }\\n\\n    /// @notice Perform the minimum operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted minimum comparison\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type euint128 containing the minimum value\\n    function min(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return euint128.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.min));\\n    }\\n\\n    /// @notice Perform the minimum operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted minimum comparison\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type euint256 containing the minimum value\\n    function min(euint256 lhs, euint256 rhs) internal returns (euint256) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return euint256.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.min));\\n    }\\n\\n    /// @notice Perform the maximum operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted maximum calculation\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type euint8 containing the maximum result\\n    function max(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return euint8.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.max));\\n    }\\n\\n    /// @notice Perform the maximum operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted maximum calculation\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type euint16 containing the maximum result\\n    function max(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return euint16.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.max));\\n    }\\n\\n    /// @notice Perform the maximum operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted maximum calculation\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type euint32 containing the maximum result\\n    function max(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return euint32.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.max));\\n    }\\n\\n    /// @notice Perform the maximum operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted maximum comparison\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type euint64 containing the maximum value\\n    function max(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return euint64.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.max));\\n    }\\n\\n    /// @notice Perform the maximum operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted maximum comparison\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type euint128 containing the maximum value\\n    function max(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return euint128.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.max));\\n    }\\n\\n    /// @notice Perform the maximum operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted maximum comparison\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type euint256 containing the maximum value\\n    function max(euint256 lhs, euint256 rhs) internal returns (euint256) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return euint256.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.max));\\n    }\\n\\n    /// @notice Perform the shift left operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted left shift\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type euint8 containing the left shift result\\n    function shl(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return euint8.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.shl));\\n    }\\n\\n    /// @notice Perform the shift left operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted left shift\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type euint16 containing the left shift result\\n    function shl(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return euint16.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.shl));\\n    }\\n\\n    /// @notice Perform the shift left operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted left shift\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type euint32 containing the left shift result\\n    function shl(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return euint32.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.shl));\\n    }\\n\\n    /// @notice Perform the shift left operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted left shift\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type euint64 containing the left shift result\\n    function shl(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return euint64.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.shl));\\n    }\\n\\n    /// @notice Perform the shift left operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted left shift\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type euint128 containing the left shift result\\n    function shl(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return euint128.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.shl));\\n    }\\n\\n    /// @notice Perform the shift left operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted left shift\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type euint256 containing the left shift result\\n    function shl(euint256 lhs, euint256 rhs) internal returns (euint256) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return euint256.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.shl));\\n    }\\n\\n    /// @notice Perform the shift right operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted right shift\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type euint8 containing the right shift result\\n    function shr(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return euint8.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.shr));\\n    }\\n\\n    /// @notice Perform the shift right operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted right shift\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type euint16 containing the right shift result\\n    function shr(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return euint16.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.shr));\\n    }\\n\\n    /// @notice Perform the shift right operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted right shift\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type euint32 containing the right shift result\\n    function shr(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return euint32.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.shr));\\n    }\\n\\n    /// @notice Perform the shift right operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted right shift\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type euint64 containing the right shift result\\n    function shr(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return euint64.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.shr));\\n    }\\n\\n    /// @notice Perform the shift right operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted right shift\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type euint128 containing the right shift result\\n    function shr(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return euint128.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.shr));\\n    }\\n\\n    /// @notice Perform the shift right operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted right shift\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type euint256 containing the right shift result\\n    function shr(euint256 lhs, euint256 rhs) internal returns (euint256) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return euint256.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.shr));\\n    }\\n\\n    /// @notice Perform the rol operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted left rotation\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type euint8 containing the left rotation result\\n    function rol(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return euint8.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.rol));\\n    }\\n\\n    /// @notice Perform the rotate left operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted left rotation\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type euint16 containing the left rotation result\\n    function rol(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return euint16.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.rol));\\n    }\\n\\n    /// @notice Perform the rotate left operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted left rotation\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type euint32 containing the left rotation result\\n    function rol(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return euint32.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.rol));\\n    }\\n\\n    /// @notice Perform the rotate left operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted left rotation\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type euint64 containing the left rotation result\\n    function rol(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return euint64.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.rol));\\n    }\\n\\n    /// @notice Perform the rotate left operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted left rotation\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type euint128 containing the left rotation result\\n    function rol(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return euint128.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.rol));\\n    }\\n\\n    /// @notice Perform the rotate left operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted left rotation\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type euint256 containing the left rotation result\\n    function rol(euint256 lhs, euint256 rhs) internal returns (euint256) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return euint256.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.rol));\\n    }\\n\\n    /// @notice Perform the rotate right operation on two parameters of type euint8\\n    /// @dev Verifies that inputs are initialized, performs encrypted right rotation\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return result of type euint8 containing the right rotation result\\n    function ror(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint8(0);\\n        }\\n\\n        return euint8.wrap(Impl.mathOp(Utils.EUINT8_TFHE, euint8.unwrap(lhs), euint8.unwrap(rhs), FunctionId.ror));\\n    }\\n\\n    /// @notice Perform the rotate right operation on two parameters of type euint16\\n    /// @dev Verifies that inputs are initialized, performs encrypted right rotation\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return result of type euint16 containing the right rotation result\\n    function ror(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint16(0);\\n        }\\n\\n        return euint16.wrap(Impl.mathOp(Utils.EUINT16_TFHE, euint16.unwrap(lhs), euint16.unwrap(rhs), FunctionId.ror));\\n    }\\n\\n    /// @notice Perform the rotate right operation on two parameters of type euint32\\n    /// @dev Verifies that inputs are initialized, performs encrypted right rotation\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return result of type euint32 containing the right rotation result\\n    function ror(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint32(0);\\n        }\\n\\n        return euint32.wrap(Impl.mathOp(Utils.EUINT32_TFHE, euint32.unwrap(lhs), euint32.unwrap(rhs), FunctionId.ror));\\n    }\\n\\n    /// @notice Perform the rotate right operation on two parameters of type euint64\\n    /// @dev Verifies that inputs are initialized, performs encrypted right rotation\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return result of type euint64 containing the right rotation result\\n    function ror(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint64(0);\\n        }\\n\\n        return euint64.wrap(Impl.mathOp(Utils.EUINT64_TFHE, euint64.unwrap(lhs), euint64.unwrap(rhs), FunctionId.ror));\\n    }\\n\\n    /// @notice Perform the rotate right operation on two parameters of type euint128\\n    /// @dev Verifies that inputs are initialized, performs encrypted right rotation\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return result of type euint128 containing the right rotation result\\n    function ror(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint128(0);\\n        }\\n\\n        return euint128.wrap(Impl.mathOp(Utils.EUINT128_TFHE, euint128.unwrap(lhs), euint128.unwrap(rhs), FunctionId.ror));\\n    }\\n\\n    /// @notice Perform the rotate right operation on two parameters of type euint256\\n    /// @dev Verifies that inputs are initialized, performs encrypted right rotation\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return result of type euint256 containing the right rotation result\\n    function ror(euint256 lhs, euint256 rhs) internal returns (euint256) {\\n        if (!Common.isInitialized(lhs)) {\\n            lhs = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(rhs)) {\\n            rhs = asEuint256(0);\\n        }\\n\\n        return euint256.wrap(Impl.mathOp(Utils.EUINT256_TFHE, euint256.unwrap(lhs), euint256.unwrap(rhs), FunctionId.ror));\\n    }\\n\\n    /// @notice Performs the async decrypt operation on a ciphertext\\n    /// @dev The decrypted output should be asynchronously handled by the IAsyncFHEReceiver implementation\\n    /// @param input1 the input ciphertext\\n    function decrypt(ebool input1) internal {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEbool(false);\\n        }\\n\\n        ebool.wrap(Impl.decrypt(ebool.unwrap(input1)));\\n    }\\n    /// @notice Performs the async decrypt operation on a ciphertext\\n    /// @dev The decrypted output should be asynchronously handled by the IAsyncFHEReceiver implementation\\n    /// @param input1 the input ciphertext\\n    function decrypt(euint8 input1) internal {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEuint8(0);\\n        }\\n\\n        euint8.wrap(Impl.decrypt(euint8.unwrap(input1)));\\n    }\\n    /// @notice Performs the async decrypt operation on a ciphertext\\n    /// @dev The decrypted output should be asynchronously handled by the IAsyncFHEReceiver implementation\\n    /// @param input1 the input ciphertext\\n    function decrypt(euint16 input1) internal {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEuint16(0);\\n        }\\n\\n        euint16.wrap(Impl.decrypt(euint16.unwrap(input1)));\\n    }\\n    /// @notice Performs the async decrypt operation on a ciphertext\\n    /// @dev The decrypted output should be asynchronously handled by the IAsyncFHEReceiver implementation\\n    /// @param input1 the input ciphertext\\n    function decrypt(euint32 input1) internal {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEuint32(0);\\n        }\\n\\n        euint32.wrap(Impl.decrypt(euint32.unwrap(input1)));\\n    }\\n    /// @notice Performs the async decrypt operation on a ciphertext\\n    /// @dev The decrypted output should be asynchronously handled by the IAsyncFHEReceiver implementation\\n    /// @param input1 the input ciphertext\\n    function decrypt(euint64 input1) internal {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEuint64(0);\\n        }\\n\\n        euint64.wrap(Impl.decrypt(euint64.unwrap(input1)));\\n    }\\n    /// @notice Performs the async decrypt operation on a ciphertext\\n    /// @dev The decrypted output should be asynchronously handled by the IAsyncFHEReceiver implementation\\n    /// @param input1 the input ciphertext\\n    function decrypt(euint128 input1) internal {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEuint128(0);\\n        }\\n\\n        euint128.wrap(Impl.decrypt(euint128.unwrap(input1)));\\n    }\\n    /// @notice Performs the async decrypt operation on a ciphertext\\n    /// @dev The decrypted output should be asynchronously handled by the IAsyncFHEReceiver implementation\\n    /// @param input1 the input ciphertext\\n    function decrypt(euint256 input1) internal {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEuint256(0);\\n        }\\n\\n        euint256.wrap(Impl.decrypt(euint256.unwrap(input1)));\\n    }\\n    /// @notice Performs the async decrypt operation on a ciphertext\\n    /// @dev The decrypted output should be asynchronously handled by the IAsyncFHEReceiver implementation\\n    /// @param input1 the input ciphertext\\n    function decrypt(eaddress input1) internal {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEaddress(address(0));\\n        }\\n\\n        Impl.decrypt(eaddress.unwrap(input1));\\n    }\\n\\n    /// @notice Gets the decrypted value from a previously decrypted ebool ciphertext\\n    /// @dev This function will revert if the ciphertext is not yet decrypted. Use getDecryptResultSafe for a non-reverting version.\\n    /// @param input1 The ebool ciphertext to get the decrypted value from\\n    /// @return The decrypted boolean value\\n    function getDecryptResult(ebool input1) internal view returns (bool) {\\n        uint256 result = Impl.getDecryptResult(ebool.unwrap(input1));\\n        return result != 0;\\n    }\\n\\n    /// @notice Gets the decrypted value from a previously decrypted euint8 ciphertext\\n    /// @dev This function will revert if the ciphertext is not yet decrypted. Use getDecryptResultSafe for a non-reverting version.\\n    /// @param input1 The euint8 ciphertext to get the decrypted value from\\n    /// @return The decrypted uint8 value\\n    function getDecryptResult(euint8 input1) internal view returns (uint8) {\\n        return uint8(Impl.getDecryptResult(euint8.unwrap(input1)));\\n    }\\n\\n    /// @notice Gets the decrypted value from a previously decrypted euint16 ciphertext\\n    /// @dev This function will revert if the ciphertext is not yet decrypted. Use getDecryptResultSafe for a non-reverting version.\\n    /// @param input1 The euint16 ciphertext to get the decrypted value from\\n    /// @return The decrypted uint16 value\\n    function getDecryptResult(euint16 input1) internal view returns (uint16) {\\n        return uint16(Impl.getDecryptResult(euint16.unwrap(input1)));\\n    }\\n\\n    /// @notice Gets the decrypted value from a previously decrypted euint32 ciphertext\\n    /// @dev This function will revert if the ciphertext is not yet decrypted. Use getDecryptResultSafe for a non-reverting version.\\n    /// @param input1 The euint32 ciphertext to get the decrypted value from\\n    /// @return The decrypted uint32 value\\n    function getDecryptResult(euint32 input1) internal view returns (uint32) {\\n        return uint32(Impl.getDecryptResult(euint32.unwrap(input1)));\\n    }\\n\\n    /// @notice Gets the decrypted value from a previously decrypted euint64 ciphertext\\n    /// @dev This function will revert if the ciphertext is not yet decrypted. Use getDecryptResultSafe for a non-reverting version.\\n    /// @param input1 The euint64 ciphertext to get the decrypted value from\\n    /// @return The decrypted uint64 value\\n    function getDecryptResult(euint64 input1) internal view returns (uint64) {\\n        return uint64(Impl.getDecryptResult(euint64.unwrap(input1)));\\n    }\\n\\n    /// @notice Gets the decrypted value from a previously decrypted euint128 ciphertext\\n    /// @dev This function will revert if the ciphertext is not yet decrypted. Use getDecryptResultSafe for a non-reverting version.\\n    /// @param input1 The euint128 ciphertext to get the decrypted value from\\n    /// @return The decrypted uint128 value\\n    function getDecryptResult(euint128 input1) internal view returns (uint128) {\\n        return uint128(Impl.getDecryptResult(euint128.unwrap(input1)));\\n    }\\n\\n    /// @notice Gets the decrypted value from a previously decrypted euint256 ciphertext\\n    /// @dev This function will revert if the ciphertext is not yet decrypted. Use getDecryptResultSafe for a non-reverting version.\\n    /// @param input1 The euint256 ciphertext to get the decrypted value from\\n    /// @return The decrypted uint256 value\\n    function getDecryptResult(euint256 input1) internal view returns (uint256) {\\n        return uint256(Impl.getDecryptResult(euint256.unwrap(input1)));\\n    }\\n\\n    /// @notice Gets the decrypted value from a previously decrypted eaddress ciphertext\\n    /// @dev This function will revert if the ciphertext is not yet decrypted. Use getDecryptResultSafe for a non-reverting version.\\n    /// @param input1 The eaddress ciphertext to get the decrypted value from\\n    /// @return The decrypted address value\\n    function getDecryptResult(eaddress input1) internal view returns (address) {\\n        return address(uint160(Impl.getDecryptResult(eaddress.unwrap(input1))));\\n    }\\n\\n    /// @notice Gets the decrypted value from a previously decrypted raw ciphertext\\n    /// @dev This function will revert if the ciphertext is not yet decrypted. Use getDecryptResultSafe for a non-reverting version.\\n    /// @param input1 The raw ciphertext to get the decrypted value from\\n    /// @return The decrypted uint256 value\\n    function getDecryptResult(uint256 input1) internal view returns (uint256) {\\n        return Impl.getDecryptResult(input1);\\n    }\\n\\n    /// @notice Safely gets the decrypted value from an ebool ciphertext\\n    /// @dev Returns the decrypted value and a flag indicating whether the decryption has finished\\n    /// @param input1 The ebool ciphertext to get the decrypted value from\\n    /// @return result The decrypted boolean value\\n    /// @return decrypted Flag indicating if the value was successfully decrypted\\n    function getDecryptResultSafe(ebool input1) internal view returns (bool result, bool decrypted) {\\n        (uint256 _result, bool _decrypted) = Impl.getDecryptResultSafe(ebool.unwrap(input1));\\n        return (_result != 0, _decrypted);\\n    }\\n\\n    /// @notice Safely gets the decrypted value from a euint8 ciphertext\\n    /// @dev Returns the decrypted value and a flag indicating whether the decryption has finished\\n    /// @param input1 The euint8 ciphertext to get the decrypted value from\\n    /// @return result The decrypted uint8 value\\n    /// @return decrypted Flag indicating if the value was successfully decrypted\\n    function getDecryptResultSafe(euint8 input1) internal view returns (uint8 result, bool decrypted) {\\n        (uint256 _result, bool _decrypted) = Impl.getDecryptResultSafe(euint8.unwrap(input1));\\n        return (uint8(_result), _decrypted);\\n    }\\n\\n    /// @notice Safely gets the decrypted value from a euint16 ciphertext\\n    /// @dev Returns the decrypted value and a flag indicating whether the decryption has finished\\n    /// @param input1 The euint16 ciphertext to get the decrypted value from\\n    /// @return result The decrypted uint16 value\\n    /// @return decrypted Flag indicating if the value was successfully decrypted\\n    function getDecryptResultSafe(euint16 input1) internal view returns (uint16 result, bool decrypted) {\\n        (uint256 _result, bool _decrypted) = Impl.getDecryptResultSafe(euint16.unwrap(input1));\\n        return (uint16(_result), _decrypted);\\n    }\\n\\n    /// @notice Safely gets the decrypted value from a euint32 ciphertext\\n    /// @dev Returns the decrypted value and a flag indicating whether the decryption has finished\\n    /// @param input1 The euint32 ciphertext to get the decrypted value from\\n    /// @return result The decrypted uint32 value\\n    /// @return decrypted Flag indicating if the value was successfully decrypted\\n    function getDecryptResultSafe(euint32 input1) internal view returns (uint32 result, bool decrypted) {\\n        (uint256 _result, bool _decrypted) = Impl.getDecryptResultSafe(euint32.unwrap(input1));\\n        return (uint32(_result), _decrypted);\\n    }\\n\\n    /// @notice Safely gets the decrypted value from a euint64 ciphertext\\n    /// @dev Returns the decrypted value and a flag indicating whether the decryption has finished\\n    /// @param input1 The euint64 ciphertext to get the decrypted value from\\n    /// @return result The decrypted uint64 value\\n    /// @return decrypted Flag indicating if the value was successfully decrypted\\n    function getDecryptResultSafe(euint64 input1) internal view returns (uint64 result, bool decrypted) {\\n        (uint256 _result, bool _decrypted) = Impl.getDecryptResultSafe(euint64.unwrap(input1));\\n        return (uint64(_result), _decrypted);\\n    }\\n\\n    /// @notice Safely gets the decrypted value from a euint128 ciphertext\\n    /// @dev Returns the decrypted value and a flag indicating whether the decryption has finished\\n    /// @param input1 The euint128 ciphertext to get the decrypted value from\\n    /// @return result The decrypted uint128 value\\n    /// @return decrypted Flag indicating if the value was successfully decrypted\\n    function getDecryptResultSafe(euint128 input1) internal view returns (uint128 result, bool decrypted) {\\n        (uint256 _result, bool _decrypted) = Impl.getDecryptResultSafe(euint128.unwrap(input1));\\n        return (uint128(_result), _decrypted);\\n    }\\n\\n    /// @notice Safely gets the decrypted value from a euint256 ciphertext\\n    /// @dev Returns the decrypted value and a flag indicating whether the decryption has finished\\n    /// @param input1 The euint256 ciphertext to get the decrypted value from\\n    /// @return result The decrypted uint256 value\\n    /// @return decrypted Flag indicating if the value was successfully decrypted\\n    function getDecryptResultSafe(euint256 input1) internal view returns (uint256 result, bool decrypted) {\\n        (uint256 _result, bool _decrypted) = Impl.getDecryptResultSafe(euint256.unwrap(input1));\\n        return (uint256(_result), _decrypted);\\n    }\\n\\n    /// @notice Safely gets the decrypted value from an eaddress ciphertext\\n    /// @dev Returns the decrypted value and a flag indicating whether the decryption has finished\\n    /// @param input1 The eaddress ciphertext to get the decrypted value from\\n    /// @return result The decrypted address value\\n    /// @return decrypted Flag indicating if the value was successfully decrypted\\n    function getDecryptResultSafe(eaddress input1) internal view returns (address result, bool decrypted) {\\n        (uint256 _result, bool _decrypted) = Impl.getDecryptResultSafe(eaddress.unwrap(input1));\\n        return (address(uint160(_result)), _decrypted);\\n    }\\n\\n    /// @notice Safely gets the decrypted value from a raw ciphertext\\n    /// @dev Returns the decrypted value and a flag indicating whether the decryption has finished\\n    /// @param input1 The raw ciphertext to get the decrypted value from\\n    /// @return result The decrypted uint256 value\\n    /// @return decrypted Flag indicating if the value was successfully decrypted\\n    function getDecryptResultSafe(uint256 input1) internal view returns (uint256 result, bool decrypted) {\\n        (uint256 _result, bool _decrypted) = Impl.getDecryptResultSafe(input1);\\n        return (_result, _decrypted);\\n    }\\n\\n    /// @notice Performs a multiplexer operation between two ebool values based on a selector\\n    /// @dev If input1 is true, returns input2, otherwise returns input3. All inputs are initialized to defaults if not set.\\n    /// @param input1 The selector of type ebool\\n    /// @param input2 First choice of type ebool\\n    /// @param input3 Second choice of type ebool\\n    /// @return result of type ebool containing the selected value\\n    function select(ebool input1, ebool input2, ebool input3) internal returns (ebool) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEbool(false);\\n        }\\n        if (!Common.isInitialized(input2)) {\\n            input2 = asEbool(false);\\n        }\\n        if (!Common.isInitialized(input3)) {\\n            input3 = asEbool(false);\\n        }\\n\\n        return ebool.wrap(Impl.select(Utils.EBOOL_TFHE, input1, ebool.unwrap(input2), ebool.unwrap(input3)));\\n    }\\n\\n    /// @notice Performs a multiplexer operation between two euint8 values based on a selector\\n    /// @dev If input1 is true, returns input2, otherwise returns input3. All inputs are initialized to defaults if not set.\\n    /// @param input1 The selector of type ebool\\n    /// @param input2 First choice of type euint8\\n    /// @param input3 Second choice of type euint8\\n    /// @return result of type euint8 containing the selected value\\n    function select(ebool input1, euint8 input2, euint8 input3) internal returns (euint8) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEbool(false);\\n        }\\n        if (!Common.isInitialized(input2)) {\\n            input2 = asEuint8(0);\\n        }\\n        if (!Common.isInitialized(input3)) {\\n            input3 = asEuint8(0);\\n        }\\n\\n        return euint8.wrap(Impl.select(Utils.EUINT8_TFHE, input1, euint8.unwrap(input2), euint8.unwrap(input3)));\\n    }\\n\\n    /// @notice Performs a multiplexer operation between two euint16 values based on a selector\\n    /// @dev If input1 is true, returns input2, otherwise returns input3. All inputs are initialized to defaults if not set.\\n    /// @param input1 The selector of type ebool\\n    /// @param input2 First choice of type euint16\\n    /// @param input3 Second choice of type euint16\\n    /// @return result of type euint16 containing the selected value\\n    function select(ebool input1, euint16 input2, euint16 input3) internal returns (euint16) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEbool(false);\\n        }\\n        if (!Common.isInitialized(input2)) {\\n            input2 = asEuint16(0);\\n        }\\n        if (!Common.isInitialized(input3)) {\\n            input3 = asEuint16(0);\\n        }\\n\\n        return euint16.wrap(Impl.select(Utils.EUINT16_TFHE, input1, euint16.unwrap(input2), euint16.unwrap(input3)));\\n    }\\n\\n    /// @notice Performs a multiplexer operation between two euint32 values based on a selector\\n    /// @dev If input1 is true, returns input2, otherwise returns input3. All inputs are initialized to defaults if not set.\\n    /// @param input1 The selector of type ebool\\n    /// @param input2 First choice of type euint32\\n    /// @param input3 Second choice of type euint32\\n    /// @return result of type euint32 containing the selected value\\n    function select(ebool input1, euint32 input2, euint32 input3) internal returns (euint32) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEbool(false);\\n        }\\n        if (!Common.isInitialized(input2)) {\\n            input2 = asEuint32(0);\\n        }\\n        if (!Common.isInitialized(input3)) {\\n            input3 = asEuint32(0);\\n        }\\n\\n        return euint32.wrap(Impl.select(Utils.EUINT32_TFHE, input1, euint32.unwrap(input2), euint32.unwrap(input3)));\\n    }\\n\\n    /// @notice Performs a multiplexer operation between two euint64 values based on a selector\\n    /// @dev If input1 is true, returns input2, otherwise returns input3. All inputs are initialized to defaults if not set.\\n    /// @param input1 The selector of type ebool\\n    /// @param input2 First choice of type euint64\\n    /// @param input3 Second choice of type euint64\\n    /// @return result of type euint64 containing the selected value\\n    function select(ebool input1, euint64 input2, euint64 input3) internal returns (euint64) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEbool(false);\\n        }\\n        if (!Common.isInitialized(input2)) {\\n            input2 = asEuint64(0);\\n        }\\n        if (!Common.isInitialized(input3)) {\\n            input3 = asEuint64(0);\\n        }\\n\\n        return euint64.wrap(Impl.select(Utils.EUINT64_TFHE, input1, euint64.unwrap(input2), euint64.unwrap(input3)));\\n    }\\n\\n    /// @notice Performs a multiplexer operation between two euint128 values based on a selector\\n    /// @dev If input1 is true, returns input2, otherwise returns input3. All inputs are initialized to defaults if not set.\\n    /// @param input1 The selector of type ebool\\n    /// @param input2 First choice of type euint128\\n    /// @param input3 Second choice of type euint128\\n    /// @return result of type euint128 containing the selected value\\n    function select(ebool input1, euint128 input2, euint128 input3) internal returns (euint128) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEbool(false);\\n        }\\n        if (!Common.isInitialized(input2)) {\\n            input2 = asEuint128(0);\\n        }\\n        if (!Common.isInitialized(input3)) {\\n            input3 = asEuint128(0);\\n        }\\n\\n        return euint128.wrap(Impl.select(Utils.EUINT128_TFHE, input1, euint128.unwrap(input2), euint128.unwrap(input3)));\\n    }\\n\\n    /// @notice Performs a multiplexer operation between two euint256 values based on a selector\\n    /// @dev If input1 is true, returns input2, otherwise returns input3. All inputs are initialized to defaults if not set.\\n    /// @param input1 The selector of type ebool\\n    /// @param input2 First choice of type euint256\\n    /// @param input3 Second choice of type euint256\\n    /// @return result of type euint256 containing the selected value\\n    function select(ebool input1, euint256 input2, euint256 input3) internal returns (euint256) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEbool(false);\\n        }\\n        if (!Common.isInitialized(input2)) {\\n            input2 = asEuint256(0);\\n        }\\n        if (!Common.isInitialized(input3)) {\\n            input3 = asEuint256(0);\\n        }\\n\\n        return euint256.wrap(Impl.select(Utils.EUINT256_TFHE, input1, euint256.unwrap(input2), euint256.unwrap(input3)));\\n    }\\n\\n    /// @notice Performs a multiplexer operation between two eaddress values based on a selector\\n    /// @dev If input1 is true, returns input2, otherwise returns input3. All inputs are initialized to defaults if not set.\\n    /// @param input1 The selector of type ebool\\n    /// @param input2 First choice of type eaddress\\n    /// @param input3 Second choice of type eaddress\\n    /// @return result of type eaddress containing the selected value\\n    function select(ebool input1, eaddress input2, eaddress input3) internal returns (eaddress) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEbool(false);\\n        }\\n        if (!Common.isInitialized(input2)) {\\n            input2 = asEaddress(address(0));\\n        }\\n        if (!Common.isInitialized(input3)) {\\n            input3 = asEaddress(address(0));\\n        }\\n\\n        return eaddress.wrap(Impl.select(Utils.EADDRESS_TFHE, input1, eaddress.unwrap(input2), eaddress.unwrap(input3)));\\n    }\\n\\n    /// @notice Performs the not operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext.\\n    /// @param input1 the input ciphertext\\n    function not(ebool input1) internal returns (ebool) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEbool(false);\\n        }\\n\\n        return ebool.wrap(Impl.not(Utils.EBOOL_TFHE, ebool.unwrap(input1)));\\n    }\\n\\n    /// @notice Performs the not operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext.\\n    /// @param input1 the input ciphertext\\n    function not(euint8 input1) internal returns (euint8) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEuint8(0);\\n        }\\n\\n        return euint8.wrap(Impl.not(Utils.EUINT8_TFHE, euint8.unwrap(input1)));\\n    }\\n    /// @notice Performs the not operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext.\\n    /// @param input1 the input ciphertext\\n    function not(euint16 input1) internal returns (euint16) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEuint16(0);\\n        }\\n\\n        return euint16.wrap(Impl.not(Utils.EUINT16_TFHE, euint16.unwrap(input1)));\\n    }\\n    /// @notice Performs the not operation on a ciphertext\\n    /// @dev Verifies that the input value matches a valid ciphertext.\\n    /// @param input1 the input ciphertext\\n    function not(euint32 input1) internal returns (euint32) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEuint32(0);\\n        }\\n\\n        return euint32.wrap(Impl.not(Utils.EUINT32_TFHE, euint32.unwrap(input1)));\\n    }\\n\\n    /// @notice Performs the bitwise NOT operation on an encrypted 64-bit unsigned integer\\n    /// @dev Verifies that the input is initialized, defaulting to 0 if not.\\n    ///      The operation inverts all bits of the input value.\\n    /// @param input1 The input ciphertext to negate\\n    /// @return An euint64 containing the bitwise NOT of the input\\n    function not(euint64 input1) internal returns (euint64) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEuint64(0);\\n        }\\n\\n        return euint64.wrap(Impl.not(Utils.EUINT64_TFHE, euint64.unwrap(input1)));\\n    }\\n\\n    /// @notice Performs the bitwise NOT operation on an encrypted 128-bit unsigned integer\\n    /// @dev Verifies that the input is initialized, defaulting to 0 if not.\\n    ///      The operation inverts all bits of the input value.\\n    /// @param input1 The input ciphertext to negate\\n    /// @return An euint128 containing the bitwise NOT of the input\\n    function not(euint128 input1) internal returns (euint128) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEuint128(0);\\n        }\\n\\n        return euint128.wrap(Impl.not(Utils.EUINT128_TFHE, euint128.unwrap(input1)));\\n    }\\n\\n    /// @notice Performs the bitwise NOT operation on an encrypted 256-bit unsigned integer\\n    /// @dev Verifies that the input is initialized, defaulting to 0 if not.\\n    ///      The operation inverts all bits of the input value.\\n    /// @param input1 The input ciphertext to negate\\n    /// @return An euint256 containing the bitwise NOT of the input\\n    function not(euint256 input1) internal returns (euint256) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEuint256(0);\\n        }\\n\\n        return euint256.wrap(Impl.not(Utils.EUINT256_TFHE, euint256.unwrap(input1)));\\n    }\\n\\n    /// @notice Performs the square operation on an encrypted 8-bit unsigned integer\\n    /// @dev Verifies that the input is initialized, defaulting to 0 if not.\\n    ///      Note: The result may overflow if input * input exceeds 8 bits.\\n    /// @param input1 The input ciphertext to square\\n    /// @return An euint8 containing the square of the input\\n    function square(euint8 input1) internal returns (euint8) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEuint8(0);\\n        }\\n\\n        return euint8.wrap(Impl.square(Utils.EUINT8_TFHE, euint8.unwrap(input1)));\\n    }\\n\\n    /// @notice Performs the square operation on an encrypted 16-bit unsigned integer\\n    /// @dev Verifies that the input is initialized, defaulting to 0 if not.\\n    ///      Note: The result may overflow if input * input exceeds 16 bits.\\n    /// @param input1 The input ciphertext to square\\n    /// @return An euint16 containing the square of the input\\n    function square(euint16 input1) internal returns (euint16) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEuint16(0);\\n        }\\n\\n        return euint16.wrap(Impl.square(Utils.EUINT16_TFHE, euint16.unwrap(input1)));\\n    }\\n\\n    /// @notice Performs the square operation on an encrypted 32-bit unsigned integer\\n    /// @dev Verifies that the input is initialized, defaulting to 0 if not.\\n    ///      Note: The result may overflow if input * input exceeds 32 bits.\\n    /// @param input1 The input ciphertext to square\\n    /// @return An euint32 containing the square of the input\\n    function square(euint32 input1) internal returns (euint32) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEuint32(0);\\n        }\\n\\n        return euint32.wrap(Impl.square(Utils.EUINT32_TFHE, euint32.unwrap(input1)));\\n    }\\n\\n    /// @notice Performs the square operation on an encrypted 64-bit unsigned integer\\n    /// @dev Verifies that the input is initialized, defaulting to 0 if not.\\n    ///      Note: The result may overflow if input * input exceeds 64 bits.\\n    /// @param input1 The input ciphertext to square\\n    /// @return An euint64 containing the square of the input\\n    function square(euint64 input1) internal returns (euint64) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEuint64(0);\\n        }\\n\\n        return euint64.wrap(Impl.square(Utils.EUINT64_TFHE, euint64.unwrap(input1)));\\n    }\\n\\n    /// @notice Performs the square operation on an encrypted 128-bit unsigned integer\\n    /// @dev Verifies that the input is initialized, defaulting to 0 if not.\\n    ///      Note: The result may overflow if input * input exceeds 128 bits.\\n    /// @param input1 The input ciphertext to square\\n    /// @return An euint128 containing the square of the input\\n    function square(euint128 input1) internal returns (euint128) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEuint128(0);\\n        }\\n\\n        return euint128.wrap(Impl.square(Utils.EUINT128_TFHE, euint128.unwrap(input1)));\\n    }\\n\\n    /// @notice Performs the square operation on an encrypted 256-bit unsigned integer\\n    /// @dev Verifies that the input is initialized, defaulting to 0 if not.\\n    ///      Note: The result may overflow if input * input exceeds 256 bits.\\n    /// @param input1 The input ciphertext to square\\n    /// @return An euint256 containing the square of the input\\n    function square(euint256 input1) internal returns (euint256) {\\n        if (!Common.isInitialized(input1)) {\\n            input1 = asEuint256(0);\\n        }\\n\\n        return euint256.wrap(Impl.square(Utils.EUINT256_TFHE, euint256.unwrap(input1)));\\n    }\\n    /// @notice Generates a random value of a euint8 type for provided securityZone\\n    /// @dev Generates a cryptographically secure random 8-bit unsigned integer in encrypted form.\\n    ///      The generated value is fully encrypted and cannot be predicted by any party.\\n    /// @param securityZone The security zone identifier to use for random value generation.\\n    /// @return A randomly generated encrypted 8-bit unsigned integer (euint8)\\n    function randomEuint8(int32 securityZone) internal returns (euint8) {\\n        return euint8.wrap(Impl.random(Utils.EUINT8_TFHE, 0, securityZone));\\n    }\\n    /// @notice Generates a random value of a euint8 type\\n    /// @dev Generates a cryptographically secure random 8-bit unsigned integer in encrypted form\\n    ///      using the default security zone (0). The generated value is fully encrypted and\\n    ///      cannot be predicted by any party.\\n    /// @return A randomly generated encrypted 8-bit unsigned integer (euint8)\\n    function randomEuint8() internal returns (euint8) {\\n        return randomEuint8(0);\\n    }\\n    /// @notice Generates a random value of a euint16 type for provided securityZone\\n    /// @dev Generates a cryptographically secure random 16-bit unsigned integer in encrypted form.\\n    ///      The generated value is fully encrypted and cannot be predicted by any party.\\n    /// @param securityZone The security zone identifier to use for random value generation.\\n    /// @return A randomly generated encrypted 16-bit unsigned integer (euint16)\\n    function randomEuint16(int32 securityZone) internal returns (euint16) {\\n        return euint16.wrap(Impl.random(Utils.EUINT16_TFHE, 0, securityZone));\\n    }\\n    /// @notice Generates a random value of a euint16 type\\n    /// @dev Generates a cryptographically secure random 16-bit unsigned integer in encrypted form\\n    ///      using the default security zone (0). The generated value is fully encrypted and\\n    ///      cannot be predicted by any party.\\n    /// @return A randomly generated encrypted 16-bit unsigned integer (euint16)\\n    function randomEuint16() internal returns (euint16) {\\n        return randomEuint16(0);\\n    }\\n    /// @notice Generates a random value of a euint32 type for provided securityZone\\n    /// @dev Generates a cryptographically secure random 32-bit unsigned integer in encrypted form.\\n    ///      The generated value is fully encrypted and cannot be predicted by any party.\\n    /// @param securityZone The security zone identifier to use for random value generation.\\n    /// @return A randomly generated encrypted 32-bit unsigned integer (euint32)\\n    function randomEuint32(int32 securityZone) internal returns (euint32) {\\n        return euint32.wrap(Impl.random(Utils.EUINT32_TFHE, 0, securityZone));\\n    }\\n    /// @notice Generates a random value of a euint32 type\\n    /// @dev Generates a cryptographically secure random 32-bit unsigned integer in encrypted form\\n    ///      using the default security zone (0). The generated value is fully encrypted and\\n    ///      cannot be predicted by any party.\\n    /// @return A randomly generated encrypted 32-bit unsigned integer (euint32)\\n    function randomEuint32() internal returns (euint32) {\\n        return randomEuint32(0);\\n    }\\n    /// @notice Generates a random value of a euint64 type for provided securityZone\\n    /// @dev Generates a cryptographically secure random 64-bit unsigned integer in encrypted form.\\n    ///      The generated value is fully encrypted and cannot be predicted by any party.\\n    /// @param securityZone The security zone identifier to use for random value generation.\\n    /// @return A randomly generated encrypted 64-bit unsigned integer (euint64)\\n    function randomEuint64(int32 securityZone) internal returns (euint64) {\\n        return euint64.wrap(Impl.random(Utils.EUINT64_TFHE, 0, securityZone));\\n    }\\n    /// @notice Generates a random value of a euint64 type\\n    /// @dev Generates a cryptographically secure random 64-bit unsigned integer in encrypted form\\n    ///      using the default security zone (0). The generated value is fully encrypted and\\n    ///      cannot be predicted by any party.\\n    /// @return A randomly generated encrypted 64-bit unsigned integer (euint64)\\n    function randomEuint64() internal returns (euint64) {\\n        return randomEuint64(0);\\n    }\\n    /// @notice Generates a random value of a euint128 type for provided securityZone\\n    /// @dev Generates a cryptographically secure random 128-bit unsigned integer in encrypted form.\\n    ///      The generated value is fully encrypted and cannot be predicted by any party.\\n    /// @param securityZone The security zone identifier to use for random value generation.\\n    /// @return A randomly generated encrypted 128-bit unsigned integer (euint128)\\n    function randomEuint128(int32 securityZone) internal returns (euint128) {\\n        return euint128.wrap(Impl.random(Utils.EUINT128_TFHE, 0, securityZone));\\n    }\\n    /// @notice Generates a random value of a euint128 type\\n    /// @dev Generates a cryptographically secure random 128-bit unsigned integer in encrypted form\\n    ///      using the default security zone (0). The generated value is fully encrypted and\\n    ///      cannot be predicted by any party.\\n    /// @return A randomly generated encrypted 128-bit unsigned integer (euint128)\\n    function randomEuint128() internal returns (euint128) {\\n        return randomEuint128(0);\\n    }\\n    /// @notice Generates a random value of a euint256 type for provided securityZone\\n    /// @dev Generates a cryptographically secure random 256-bit unsigned integer in encrypted form.\\n    ///      The generated value is fully encrypted and cannot be predicted by any party.\\n    /// @param securityZone The security zone identifier to use for random value generation.\\n    /// @return A randomly generated encrypted 256-bit unsigned integer (euint256)\\n    function randomEuint256(int32 securityZone) internal returns (euint256) {\\n        return euint256.wrap(Impl.random(Utils.EUINT256_TFHE, 0, securityZone));\\n    }\\n    /// @notice Generates a random value of a euint256 type\\n    /// @dev Generates a cryptographically secure random 256-bit unsigned integer in encrypted form\\n    ///      using the default security zone (0). The generated value is fully encrypted and\\n    ///      cannot be predicted by any party.\\n    /// @return A randomly generated encrypted 256-bit unsigned integer (euint256)\\n    function randomEuint256() internal returns (euint256) {\\n        return randomEuint256(0);\\n    }\\n\\n    /// @notice Verifies and converts an inEbool input to an ebool encrypted type\\n    /// @dev Verifies the input signature and security parameters before converting to the encrypted type\\n    /// @param value The input value containing hash, type, security zone and signature\\n    /// @return An ebool containing the verified encrypted value\\n    function asEbool(InEbool memory value) internal returns (ebool) {\\n        uint8 expectedUtype = Utils.EBOOL_TFHE;\\n        if (value.utype != expectedUtype) {\\n            revert InvalidEncryptedInput(value.utype, expectedUtype);\\n        }\\n\\n        return ebool.wrap(Impl.verifyInput(Utils.inputFromEbool(value)));\\n    }\\n\\n    /// @notice Verifies and converts an InEuint8 input to an euint8 encrypted type\\n    /// @dev Verifies the input signature and security parameters before converting to the encrypted type\\n    /// @param value The input value containing hash, type, security zone and signature\\n    /// @return An euint8 containing the verified encrypted value\\n    function asEuint8(InEuint8 memory value) internal returns (euint8) {\\n        uint8 expectedUtype = Utils.EUINT8_TFHE;\\n        if (value.utype != expectedUtype) {\\n            revert InvalidEncryptedInput(value.utype, expectedUtype);\\n        }\\n\\n\\n        return euint8.wrap(Impl.verifyInput(Utils.inputFromEuint8(value)));\\n    }\\n\\n    /// @notice Verifies and converts an InEuint16 input to an euint16 encrypted type\\n    /// @dev Verifies the input signature and security parameters before converting to the encrypted type\\n    /// @param value The input value containing hash, type, security zone and signature\\n    /// @return An euint16 containing the verified encrypted value\\n    function asEuint16(InEuint16 memory value) internal returns (euint16) {\\n        uint8 expectedUtype = Utils.EUINT16_TFHE;\\n        if (value.utype != expectedUtype) {\\n            revert InvalidEncryptedInput(value.utype, expectedUtype);\\n        }\\n\\n\\n        return euint16.wrap(Impl.verifyInput(Utils.inputFromEuint16(value)));\\n    }\\n\\n    /// @notice Verifies and converts an InEuint32 input to an euint32 encrypted type\\n    /// @dev Verifies the input signature and security parameters before converting to the encrypted type\\n    /// @param value The input value containing hash, type, security zone and signature\\n    /// @return An euint32 containing the verified encrypted value\\n    function asEuint32(InEuint32 memory value) internal returns (euint32) {\\n        uint8 expectedUtype = Utils.EUINT32_TFHE;\\n        if (value.utype != expectedUtype) {\\n            revert InvalidEncryptedInput(value.utype, expectedUtype);\\n        }\\n\\n\\n        return euint32.wrap(Impl.verifyInput(Utils.inputFromEuint32(value)));\\n    }\\n\\n    /// @notice Verifies and converts an InEuint64 input to an euint64 encrypted type\\n    /// @dev Verifies the input signature and security parameters before converting to the encrypted type\\n    /// @param value The input value containing hash, type, security zone and signature\\n    /// @return An euint64 containing the verified encrypted value\\n    function asEuint64(InEuint64 memory value) internal returns (euint64) {\\n        uint8 expectedUtype = Utils.EUINT64_TFHE;\\n        if (value.utype != expectedUtype) {\\n            revert InvalidEncryptedInput(value.utype, expectedUtype);\\n        }\\n\\n\\n        return euint64.wrap(Impl.verifyInput(Utils.inputFromEuint64(value)));\\n    }\\n\\n    /// @notice Verifies and converts an InEuint128 input to an euint128 encrypted type\\n    /// @dev Verifies the input signature and security parameters before converting to the encrypted type\\n    /// @param value The input value containing hash, type, security zone and signature\\n    /// @return An euint128 containing the verified encrypted value\\n    function asEuint128(InEuint128 memory value) internal returns (euint128) {\\n        uint8 expectedUtype = Utils.EUINT128_TFHE;\\n        if (value.utype != expectedUtype) {\\n            revert InvalidEncryptedInput(value.utype, expectedUtype);\\n        }\\n\\n\\n        return euint128.wrap(Impl.verifyInput(Utils.inputFromEuint128(value)));\\n    }\\n\\n    /// @notice Verifies and converts an InEuint256 input to an euint256 encrypted type\\n    /// @dev Verifies the input signature and security parameters before converting to the encrypted type\\n    /// @param value The input value containing hash, type, security zone and signature\\n    /// @return An euint256 containing the verified encrypted value\\n    function asEuint256(InEuint256 memory value) internal returns (euint256) {\\n        uint8 expectedUtype = Utils.EUINT256_TFHE;\\n        if (value.utype != expectedUtype) {\\n            revert InvalidEncryptedInput(value.utype, expectedUtype);\\n        }\\n\\n\\n        return euint256.wrap(Impl.verifyInput(Utils.inputFromEuint256(value)));\\n    }\\n\\n    /// @notice Verifies and converts an InEaddress input to an eaddress encrypted type\\n    /// @dev Verifies the input signature and security parameters before converting to the encrypted type\\n    /// @param value The input value containing hash, type, security zone and signature\\n    /// @return An eaddress containing the verified encrypted value\\n    function asEaddress(InEaddress memory value) internal returns (eaddress) {\\n        uint8 expectedUtype = Utils.EADDRESS_TFHE;\\n        if (value.utype != expectedUtype) {\\n            revert InvalidEncryptedInput(value.utype, expectedUtype);\\n        }\\n\\n\\n        return eaddress.wrap(Impl.verifyInput(Utils.inputFromEaddress(value)));\\n    }\\n\\n    // ********** TYPE CASTING ************* //\\n    /// @notice Converts a ebool to an euint8\\n    function asEuint8(ebool value) internal returns (euint8) {\\n        return euint8.wrap(Impl.cast(ebool.unwrap(value), Utils.EUINT8_TFHE));\\n    }\\n    /// @notice Converts a ebool to an euint16\\n    function asEuint16(ebool value) internal returns (euint16) {\\n        return euint16.wrap(Impl.cast(ebool.unwrap(value), Utils.EUINT16_TFHE));\\n    }\\n    /// @notice Converts a ebool to an euint32\\n    function asEuint32(ebool value) internal returns (euint32) {\\n        return euint32.wrap(Impl.cast(ebool.unwrap(value), Utils.EUINT32_TFHE));\\n    }\\n    /// @notice Converts a ebool to an euint64\\n    function asEuint64(ebool value) internal returns (euint64) {\\n        return euint64.wrap(Impl.cast(ebool.unwrap(value), Utils.EUINT64_TFHE));\\n    }\\n    /// @notice Converts a ebool to an euint128\\n    function asEuint128(ebool value) internal returns (euint128) {\\n        return euint128.wrap(Impl.cast(ebool.unwrap(value), Utils.EUINT128_TFHE));\\n    }\\n    /// @notice Converts a ebool to an euint256\\n    function asEuint256(ebool value) internal returns (euint256) {\\n        return euint256.wrap(Impl.cast(ebool.unwrap(value), Utils.EUINT256_TFHE));\\n    }\\n\\n    /// @notice Converts a euint8 to an ebool\\n    function asEbool(euint8 value) internal returns (ebool) {\\n        return ne(value, asEuint8(0));\\n    }\\n    /// @notice Converts a euint8 to an euint16\\n    function asEuint16(euint8 value) internal returns (euint16) {\\n        return euint16.wrap(Impl.cast(euint8.unwrap(value), Utils.EUINT16_TFHE));\\n    }\\n    /// @notice Converts a euint8 to an euint32\\n    function asEuint32(euint8 value) internal returns (euint32) {\\n        return euint32.wrap(Impl.cast(euint8.unwrap(value), Utils.EUINT32_TFHE));\\n    }\\n    /// @notice Converts a euint8 to an euint64\\n    function asEuint64(euint8 value) internal returns (euint64) {\\n        return euint64.wrap(Impl.cast(euint8.unwrap(value), Utils.EUINT64_TFHE));\\n    }\\n    /// @notice Converts a euint8 to an euint128\\n    function asEuint128(euint8 value) internal returns (euint128) {\\n        return euint128.wrap(Impl.cast(euint8.unwrap(value), Utils.EUINT128_TFHE));\\n    }\\n    /// @notice Converts a euint8 to an euint256\\n    function asEuint256(euint8 value) internal returns (euint256) {\\n        return euint256.wrap(Impl.cast(euint8.unwrap(value), Utils.EUINT256_TFHE));\\n    }\\n\\n    /// @notice Converts a euint16 to an ebool\\n    function asEbool(euint16 value) internal returns (ebool) {\\n        return ne(value, asEuint16(0));\\n    }\\n    /// @notice Converts a euint16 to an euint8\\n    function asEuint8(euint16 value) internal returns (euint8) {\\n        return euint8.wrap(Impl.cast(euint16.unwrap(value), Utils.EUINT8_TFHE));\\n    }\\n    /// @notice Converts a euint16 to an euint32\\n    function asEuint32(euint16 value) internal returns (euint32) {\\n        return euint32.wrap(Impl.cast(euint16.unwrap(value), Utils.EUINT32_TFHE));\\n    }\\n    /// @notice Converts a euint16 to an euint64\\n    function asEuint64(euint16 value) internal returns (euint64) {\\n        return euint64.wrap(Impl.cast(euint16.unwrap(value), Utils.EUINT64_TFHE));\\n    }\\n    /// @notice Converts a euint16 to an euint128\\n    function asEuint128(euint16 value) internal returns (euint128) {\\n        return euint128.wrap(Impl.cast(euint16.unwrap(value), Utils.EUINT128_TFHE));\\n    }\\n    /// @notice Converts a euint16 to an euint256\\n    function asEuint256(euint16 value) internal returns (euint256) {\\n        return euint256.wrap(Impl.cast(euint16.unwrap(value), Utils.EUINT256_TFHE));\\n    }\\n\\n    /// @notice Converts a euint32 to an ebool\\n    function asEbool(euint32 value) internal returns (ebool) {\\n        return ne(value, asEuint32(0));\\n    }\\n    /// @notice Converts a euint32 to an euint8\\n    function asEuint8(euint32 value) internal returns (euint8) {\\n        return euint8.wrap(Impl.cast(euint32.unwrap(value), Utils.EUINT8_TFHE));\\n    }\\n    /// @notice Converts a euint32 to an euint16\\n    function asEuint16(euint32 value) internal returns (euint16) {\\n        return euint16.wrap(Impl.cast(euint32.unwrap(value), Utils.EUINT16_TFHE));\\n    }\\n    /// @notice Converts a euint32 to an euint64\\n    function asEuint64(euint32 value) internal returns (euint64) {\\n        return euint64.wrap(Impl.cast(euint32.unwrap(value), Utils.EUINT64_TFHE));\\n    }\\n    /// @notice Converts a euint32 to an euint128\\n    function asEuint128(euint32 value) internal returns (euint128) {\\n        return euint128.wrap(Impl.cast(euint32.unwrap(value), Utils.EUINT128_TFHE));\\n    }\\n    /// @notice Converts a euint32 to an euint256\\n    function asEuint256(euint32 value) internal returns (euint256) {\\n        return euint256.wrap(Impl.cast(euint32.unwrap(value), Utils.EUINT256_TFHE));\\n    }\\n\\n    /// @notice Converts a euint64 to an ebool\\n    function asEbool(euint64 value) internal returns (ebool) {\\n        return ne(value, asEuint64(0));\\n    }\\n    /// @notice Converts a euint64 to an euint8\\n    function asEuint8(euint64 value) internal returns (euint8) {\\n        return euint8.wrap(Impl.cast(euint64.unwrap(value), Utils.EUINT8_TFHE));\\n    }\\n    /// @notice Converts a euint64 to an euint16\\n    function asEuint16(euint64 value) internal returns (euint16) {\\n        return euint16.wrap(Impl.cast(euint64.unwrap(value), Utils.EUINT16_TFHE));\\n    }\\n    /// @notice Converts a euint64 to an euint32\\n    function asEuint32(euint64 value) internal returns (euint32) {\\n        return euint32.wrap(Impl.cast(euint64.unwrap(value), Utils.EUINT32_TFHE));\\n    }\\n    /// @notice Converts a euint64 to an euint128\\n    function asEuint128(euint64 value) internal returns (euint128) {\\n        return euint128.wrap(Impl.cast(euint64.unwrap(value), Utils.EUINT128_TFHE));\\n    }\\n    /// @notice Converts a euint64 to an euint256\\n    function asEuint256(euint64 value) internal returns (euint256) {\\n        return euint256.wrap(Impl.cast(euint64.unwrap(value), Utils.EUINT256_TFHE));\\n    }\\n\\n    /// @notice Converts a euint128 to an ebool\\n    function asEbool(euint128 value) internal returns (ebool) {\\n        return ne(value, asEuint128(0));\\n    }\\n    /// @notice Converts a euint128 to an euint8\\n    function asEuint8(euint128 value) internal returns (euint8) {\\n        return euint8.wrap(Impl.cast(euint128.unwrap(value), Utils.EUINT8_TFHE));\\n    }\\n    /// @notice Converts a euint128 to an euint16\\n    function asEuint16(euint128 value) internal returns (euint16) {\\n        return euint16.wrap(Impl.cast(euint128.unwrap(value), Utils.EUINT16_TFHE));\\n    }\\n    /// @notice Converts a euint128 to an euint32\\n    function asEuint32(euint128 value) internal returns (euint32) {\\n        return euint32.wrap(Impl.cast(euint128.unwrap(value), Utils.EUINT32_TFHE));\\n    }\\n    /// @notice Converts a euint128 to an euint64\\n    function asEuint64(euint128 value) internal returns (euint64) {\\n        return euint64.wrap(Impl.cast(euint128.unwrap(value), Utils.EUINT64_TFHE));\\n    }\\n    /// @notice Converts a euint128 to an euint256\\n    function asEuint256(euint128 value) internal returns (euint256) {\\n        return euint256.wrap(Impl.cast(euint128.unwrap(value), Utils.EUINT256_TFHE));\\n    }\\n\\n    /// @notice Converts a euint256 to an ebool\\n    function asEbool(euint256 value) internal returns (ebool) {\\n        return ne(value, asEuint256(0));\\n    }\\n    /// @notice Converts a euint256 to an euint8\\n    function asEuint8(euint256 value) internal returns (euint8) {\\n        return euint8.wrap(Impl.cast(euint256.unwrap(value), Utils.EUINT8_TFHE));\\n    }\\n    /// @notice Converts a euint256 to an euint16\\n    function asEuint16(euint256 value) internal returns (euint16) {\\n        return euint16.wrap(Impl.cast(euint256.unwrap(value), Utils.EUINT16_TFHE));\\n    }\\n    /// @notice Converts a euint256 to an euint32\\n    function asEuint32(euint256 value) internal returns (euint32) {\\n        return euint32.wrap(Impl.cast(euint256.unwrap(value), Utils.EUINT32_TFHE));\\n    }\\n    /// @notice Converts a euint256 to an euint64\\n    function asEuint64(euint256 value) internal returns (euint64) {\\n        return euint64.wrap(Impl.cast(euint256.unwrap(value), Utils.EUINT64_TFHE));\\n    }\\n    /// @notice Converts a euint256 to an euint128\\n    function asEuint128(euint256 value) internal returns (euint128) {\\n        return euint128.wrap(Impl.cast(euint256.unwrap(value), Utils.EUINT128_TFHE));\\n    }\\n    /// @notice Converts a euint256 to an eaddress\\n    function asEaddress(euint256 value) internal returns (eaddress) {\\n        return eaddress.wrap(Impl.cast(euint256.unwrap(value), Utils.EADDRESS_TFHE));\\n    }\\n\\n    /// @notice Converts a eaddress to an ebool\\n    function asEbool(eaddress value) internal returns (ebool) {\\n        return ne(value, asEaddress(address(0)));\\n    }\\n    /// @notice Converts a eaddress to an euint8\\n    function asEuint8(eaddress value) internal returns (euint8) {\\n        return euint8.wrap(Impl.cast(eaddress.unwrap(value), Utils.EUINT8_TFHE));\\n    }\\n    /// @notice Converts a eaddress to an euint16\\n    function asEuint16(eaddress value) internal returns (euint16) {\\n        return euint16.wrap(Impl.cast(eaddress.unwrap(value), Utils.EUINT16_TFHE));\\n    }\\n    /// @notice Converts a eaddress to an euint32\\n    function asEuint32(eaddress value) internal returns (euint32) {\\n        return euint32.wrap(Impl.cast(eaddress.unwrap(value), Utils.EUINT32_TFHE));\\n    }\\n    /// @notice Converts a eaddress to an euint64\\n    function asEuint64(eaddress value) internal returns (euint64) {\\n        return euint64.wrap(Impl.cast(eaddress.unwrap(value), Utils.EUINT64_TFHE));\\n    }\\n    /// @notice Converts a eaddress to an euint128\\n    function asEuint128(eaddress value) internal returns (euint128) {\\n        return euint128.wrap(Impl.cast(eaddress.unwrap(value), Utils.EUINT128_TFHE));\\n    }\\n    /// @notice Converts a eaddress to an euint256\\n    function asEuint256(eaddress value) internal returns (euint256) {\\n        return euint256.wrap(Impl.cast(eaddress.unwrap(value), Utils.EUINT256_TFHE));\\n    }\\n    /// @notice Converts a plaintext boolean value to a ciphertext ebool\\n    /// @dev Privacy: The input value is public, therefore the resulting ciphertext should be considered public until involved in an fhe operation\\n    /// @return A ciphertext representation of the input\\n    function asEbool(bool value) internal returns (ebool) {\\n        return asEbool(value, 0);\\n    }\\n    /// @notice Converts a plaintext boolean value to a ciphertext ebool, specifying security zone\\n    /// @dev Privacy: The input value is public, therefore the resulting ciphertext should be considered public until involved in an fhe operation\\n    /// @return A ciphertext representation of the input\\n    function asEbool(bool value, int32 securityZone) internal returns (ebool) {\\n        uint256 sVal = 0;\\n        if (value) {\\n            sVal = 1;\\n        }\\n        uint256 ct = Impl.trivialEncrypt(sVal, Utils.EBOOL_TFHE, securityZone);\\n        return ebool.wrap(ct);\\n    }\\n    /// @notice Converts a uint256 to an euint8\\n    /// @dev Privacy: The input value is public, therefore the resulting ciphertext should be considered public until involved in an fhe operation\\n    function asEuint8(uint256 value) internal returns (euint8) {\\n        return asEuint8(value, 0);\\n    }\\n    /// @notice Converts a uint256 to an euint8, specifying security zone\\n    /// @dev Privacy: The input value is public, therefore the resulting ciphertext should be considered public until involved in an fhe operation\\n    function asEuint8(uint256 value, int32 securityZone) internal returns (euint8) {\\n        uint256 ct = Impl.trivialEncrypt(value, Utils.EUINT8_TFHE, securityZone);\\n        return euint8.wrap(ct);\\n    }\\n    /// @notice Converts a uint256 to an euint16\\n    /// @dev Privacy: The input value is public, therefore the resulting ciphertext should be considered public until involved in an fhe operation\\n    function asEuint16(uint256 value) internal returns (euint16) {\\n        return asEuint16(value, 0);\\n    }\\n    /// @notice Converts a uint256 to an euint16, specifying security zone\\n    /// @dev Privacy: The input value is public, therefore the resulting ciphertext should be considered public until involved in an fhe operation\\n    function asEuint16(uint256 value, int32 securityZone) internal returns (euint16) {\\n        uint256 ct = Impl.trivialEncrypt(value, Utils.EUINT16_TFHE, securityZone);\\n        return euint16.wrap(ct);\\n    }\\n    /// @notice Converts a uint256 to an euint32\\n    /// @dev Privacy: The input value is public, therefore the resulting ciphertext should be considered public until involved in an fhe operation\\n    function asEuint32(uint256 value) internal returns (euint32) {\\n        return asEuint32(value, 0);\\n    }\\n    /// @notice Converts a uint256 to an euint32, specifying security zone\\n    /// @dev Privacy: The input value is public, therefore the resulting ciphertext should be considered public until involved in an fhe operation\\n    function asEuint32(uint256 value, int32 securityZone) internal returns (euint32) {\\n        uint256 ct = Impl.trivialEncrypt(value, Utils.EUINT32_TFHE, securityZone);\\n        return euint32.wrap(ct);\\n    }\\n    /// @notice Converts a uint256 to an euint64\\n    /// @dev Privacy: The input value is public, therefore the resulting ciphertext should be considered public until involved in an fhe operation\\n    function asEuint64(uint256 value) internal returns (euint64) {\\n        return asEuint64(value, 0);\\n    }\\n    /// @notice Converts a uint256 to an euint64, specifying security zone\\n    /// @dev Privacy: The input value is public, therefore the resulting ciphertext should be considered public until involved in an fhe operation\\n    function asEuint64(uint256 value, int32 securityZone) internal returns (euint64) {\\n        uint256 ct = Impl.trivialEncrypt(value, Utils.EUINT64_TFHE, securityZone);\\n        return euint64.wrap(ct);\\n    }\\n    /// @notice Converts a uint256 to an euint128\\n    /// @dev Privacy: The input value is public, therefore the resulting ciphertext should be considered public until involved in an fhe operation\\n    function asEuint128(uint256 value) internal returns (euint128) {\\n        return asEuint128(value, 0);\\n    }\\n    /// @notice Converts a uint256 to an euint128, specifying security zone\\n    /// @dev Privacy: The input value is public, therefore the resulting ciphertext should be considered public until involved in an fhe operation\\n    function asEuint128(uint256 value, int32 securityZone) internal returns (euint128) {\\n        uint256 ct = Impl.trivialEncrypt(value, Utils.EUINT128_TFHE, securityZone);\\n        return euint128.wrap(ct);\\n    }\\n    /// @notice Converts a uint256 to an euint256\\n    /// @dev Privacy: The input value is public, therefore the resulting ciphertext should be considered public until involved in an fhe operation\\n    function asEuint256(uint256 value) internal returns (euint256) {\\n        return asEuint256(value, 0);\\n    }\\n    /// @notice Converts a uint256 to an euint256, specifying security zone\\n    /// @dev Privacy: The input value is public, therefore the resulting ciphertext should be considered public until involved in an fhe operation\\n    function asEuint256(uint256 value, int32 securityZone) internal returns (euint256) {\\n        uint256 ct = Impl.trivialEncrypt(value, Utils.EUINT256_TFHE, securityZone);\\n        return euint256.wrap(ct);\\n    }\\n    /// @notice Converts a address to an eaddress\\n    /// @dev Privacy: The input value is public, therefore the resulting ciphertext should be considered public until involved in an fhe operation\\n    /// Allows for a better user experience when working with eaddresses\\n    function asEaddress(address value) internal returns (eaddress) {\\n        return asEaddress(value, 0);\\n    }\\n    /// @notice Converts a address to an eaddress, specifying security zone\\n    /// @dev Privacy: The input value is public, therefore the resulting ciphertext should be considered public until involved in an fhe operation\\n    /// Allows for a better user experience when working with eaddresses\\n    function asEaddress(address value, int32 securityZone) internal returns (eaddress) {\\n        uint256 ct = Impl.trivialEncrypt(uint256(uint160(value)), Utils.EADDRESS_TFHE, securityZone);\\n        return eaddress.wrap(ct);\\n    }\\n\\n    /// @notice Grants permission to an account to operate on the encrypted boolean value\\n    /// @dev Allows the specified account to access the ciphertext\\n    /// @param ctHash The encrypted boolean value to grant access to\\n    /// @param account The address being granted permission\\n    function allow(ebool ctHash, address account) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(ebool.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Grants permission to an account to operate on the encrypted 8-bit unsigned integer\\n    /// @dev Allows the specified account to access the ciphertext\\n    /// @param ctHash The encrypted uint8 value to grant access to\\n    /// @param account The address being granted permission\\n    function allow(euint8 ctHash, address account) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(euint8.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Grants permission to an account to operate on the encrypted 16-bit unsigned integer\\n    /// @dev Allows the specified account to access the ciphertext\\n    /// @param ctHash The encrypted uint16 value to grant access to\\n    /// @param account The address being granted permission\\n    function allow(euint16 ctHash, address account) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(euint16.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Grants permission to an account to operate on the encrypted 32-bit unsigned integer\\n    /// @dev Allows the specified account to access the ciphertext\\n    /// @param ctHash The encrypted uint32 value to grant access to\\n    /// @param account The address being granted permission\\n    function allow(euint32 ctHash, address account) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(euint32.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Grants permission to an account to operate on the encrypted 64-bit unsigned integer\\n    /// @dev Allows the specified account to access the ciphertext\\n    /// @param ctHash The encrypted uint64 value to grant access to\\n    /// @param account The address being granted permission\\n    function allow(euint64 ctHash, address account) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(euint64.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Grants permission to an account to operate on the encrypted 128-bit unsigned integer\\n    /// @dev Allows the specified account to access the ciphertext\\n    /// @param ctHash The encrypted uint128 value to grant access to\\n    /// @param account The address being granted permission\\n    function allow(euint128 ctHash, address account) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(euint128.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Grants permission to an account to operate on the encrypted 256-bit unsigned integer\\n    /// @dev Allows the specified account to access the ciphertext\\n    /// @param ctHash The encrypted uint256 value to grant access to\\n    /// @param account The address being granted permission\\n    function allow(euint256 ctHash, address account) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(euint256.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Grants permission to an account to operate on the encrypted address\\n    /// @dev Allows the specified account to access the ciphertext\\n    /// @param ctHash The encrypted address value to grant access to\\n    /// @param account The address being granted permission\\n    function allow(eaddress ctHash, address account) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(eaddress.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Grants global permission to operate on the encrypted boolean value\\n    /// @dev Allows all accounts to access the ciphertext\\n    /// @param ctHash The encrypted boolean value to grant global access to\\n    function allowGlobal(ebool ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allowGlobal(ebool.unwrap(ctHash));\\n    }\\n\\n    /// @notice Grants global permission to operate on the encrypted 8-bit unsigned integer\\n    /// @dev Allows all accounts to access the ciphertext\\n    /// @param ctHash The encrypted uint8 value to grant global access to\\n    function allowGlobal(euint8 ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allowGlobal(euint8.unwrap(ctHash));\\n    }\\n\\n    /// @notice Grants global permission to operate on the encrypted 16-bit unsigned integer\\n    /// @dev Allows all accounts to access the ciphertext\\n    /// @param ctHash The encrypted uint16 value to grant global access to\\n    function allowGlobal(euint16 ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allowGlobal(euint16.unwrap(ctHash));\\n    }\\n\\n    /// @notice Grants global permission to operate on the encrypted 32-bit unsigned integer\\n    /// @dev Allows all accounts to access the ciphertext\\n    /// @param ctHash The encrypted uint32 value to grant global access to\\n    function allowGlobal(euint32 ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allowGlobal(euint32.unwrap(ctHash));\\n    }\\n\\n    /// @notice Grants global permission to operate on the encrypted 64-bit unsigned integer\\n    /// @dev Allows all accounts to access the ciphertext\\n    /// @param ctHash The encrypted uint64 value to grant global access to\\n    function allowGlobal(euint64 ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allowGlobal(euint64.unwrap(ctHash));\\n    }\\n\\n    /// @notice Grants global permission to operate on the encrypted 128-bit unsigned integer\\n    /// @dev Allows all accounts to access the ciphertext\\n    /// @param ctHash The encrypted uint128 value to grant global access to\\n    function allowGlobal(euint128 ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allowGlobal(euint128.unwrap(ctHash));\\n    }\\n\\n    /// @notice Grants global permission to operate on the encrypted 256-bit unsigned integer\\n    /// @dev Allows all accounts to access the ciphertext\\n    /// @param ctHash The encrypted uint256 value to grant global access to\\n    function allowGlobal(euint256 ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allowGlobal(euint256.unwrap(ctHash));\\n    }\\n\\n    /// @notice Grants global permission to operate on the encrypted address\\n    /// @dev Allows all accounts to access the ciphertext\\n    /// @param ctHash The encrypted address value to grant global access to\\n    function allowGlobal(eaddress ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allowGlobal(eaddress.unwrap(ctHash));\\n    }\\n\\n    /// @notice Checks if an account has permission to operate on the encrypted boolean value\\n    /// @dev Returns whether the specified account can access the ciphertext\\n    /// @param ctHash The encrypted boolean value to check access for\\n    /// @param account The address to check permissions for\\n    /// @return True if the account has permission, false otherwise\\n    function isAllowed(ebool ctHash, address account) internal returns (bool) {\\n        return ITaskManager(TASK_MANAGER_ADDRESS).isAllowed(ebool.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Checks if an account has permission to operate on the encrypted 8-bit unsigned integer\\n    /// @dev Returns whether the specified account can access the ciphertext\\n    /// @param ctHash The encrypted uint8 value to check access for\\n    /// @param account The address to check permissions for\\n    /// @return True if the account has permission, false otherwise\\n    function isAllowed(euint8 ctHash, address account) internal returns (bool) {\\n        return ITaskManager(TASK_MANAGER_ADDRESS).isAllowed(euint8.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Checks if an account has permission to operate on the encrypted 16-bit unsigned integer\\n    /// @dev Returns whether the specified account can access the ciphertext\\n    /// @param ctHash The encrypted uint16 value to check access for\\n    /// @param account The address to check permissions for\\n    /// @return True if the account has permission, false otherwise\\n    function isAllowed(euint16 ctHash, address account) internal returns (bool) {\\n        return ITaskManager(TASK_MANAGER_ADDRESS).isAllowed(euint16.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Checks if an account has permission to operate on the encrypted 32-bit unsigned integer\\n    /// @dev Returns whether the specified account can access the ciphertext\\n    /// @param ctHash The encrypted uint32 value to check access for\\n    /// @param account The address to check permissions for\\n    /// @return True if the account has permission, false otherwise\\n    function isAllowed(euint32 ctHash, address account) internal returns (bool) {\\n        return ITaskManager(TASK_MANAGER_ADDRESS).isAllowed(euint32.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Checks if an account has permission to operate on the encrypted 64-bit unsigned integer\\n    /// @dev Returns whether the specified account can access the ciphertext\\n    /// @param ctHash The encrypted uint64 value to check access for\\n    /// @param account The address to check permissions for\\n    /// @return True if the account has permission, false otherwise\\n    function isAllowed(euint64 ctHash, address account) internal returns (bool) {\\n        return ITaskManager(TASK_MANAGER_ADDRESS).isAllowed(euint64.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Checks if an account has permission to operate on the encrypted 128-bit unsigned integer\\n    /// @dev Returns whether the specified account can access the ciphertext\\n    /// @param ctHash The encrypted uint128 value to check access for\\n    /// @param account The address to check permissions for\\n    /// @return True if the account has permission, false otherwise\\n    function isAllowed(euint128 ctHash, address account) internal returns (bool) {\\n        return ITaskManager(TASK_MANAGER_ADDRESS).isAllowed(euint128.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Checks if an account has permission to operate on the encrypted 256-bit unsigned integer\\n    /// @dev Returns whether the specified account can access the ciphertext\\n    /// @param ctHash The encrypted uint256 value to check access for\\n    /// @param account The address to check permissions for\\n    /// @return True if the account has permission, false otherwise\\n    function isAllowed(euint256 ctHash, address account) internal returns (bool) {\\n        return ITaskManager(TASK_MANAGER_ADDRESS).isAllowed(euint256.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Checks if an account has permission to operate on the encrypted address\\n    /// @dev Returns whether the specified account can access the ciphertext\\n    /// @param ctHash The encrypted address value to check access for\\n    /// @param account The address to check permissions for\\n    /// @return True if the account has permission, false otherwise\\n    function isAllowed(eaddress ctHash, address account) internal returns (bool) {\\n        return ITaskManager(TASK_MANAGER_ADDRESS).isAllowed(eaddress.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Grants permission to the current contract to operate on the encrypted boolean value\\n    /// @dev Allows this contract to access the ciphertext\\n    /// @param ctHash The encrypted boolean value to grant access to\\n    function allowThis(ebool ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(ebool.unwrap(ctHash), address(this));\\n    }\\n\\n    /// @notice Grants permission to the current contract to operate on the encrypted 8-bit unsigned integer\\n    /// @dev Allows this contract to access the ciphertext\\n    /// @param ctHash The encrypted uint8 value to grant access to\\n    function allowThis(euint8 ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(euint8.unwrap(ctHash), address(this));\\n    }\\n\\n    /// @notice Grants permission to the current contract to operate on the encrypted 16-bit unsigned integer\\n    /// @dev Allows this contract to access the ciphertext\\n    /// @param ctHash The encrypted uint16 value to grant access to\\n    function allowThis(euint16 ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(euint16.unwrap(ctHash), address(this));\\n    }\\n\\n    /// @notice Grants permission to the current contract to operate on the encrypted 32-bit unsigned integer\\n    /// @dev Allows this contract to access the ciphertext\\n    /// @param ctHash The encrypted uint32 value to grant access to\\n    function allowThis(euint32 ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(euint32.unwrap(ctHash), address(this));\\n    }\\n\\n    /// @notice Grants permission to the current contract to operate on the encrypted 64-bit unsigned integer\\n    /// @dev Allows this contract to access the ciphertext\\n    /// @param ctHash The encrypted uint64 value to grant access to\\n    function allowThis(euint64 ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(euint64.unwrap(ctHash), address(this));\\n    }\\n\\n    /// @notice Grants permission to the current contract to operate on the encrypted 128-bit unsigned integer\\n    /// @dev Allows this contract to access the ciphertext\\n    /// @param ctHash The encrypted uint128 value to grant access to\\n    function allowThis(euint128 ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(euint128.unwrap(ctHash), address(this));\\n    }\\n\\n    /// @notice Grants permission to the current contract to operate on the encrypted 256-bit unsigned integer\\n    /// @dev Allows this contract to access the ciphertext\\n    /// @param ctHash The encrypted uint256 value to grant access to\\n    function allowThis(euint256 ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(euint256.unwrap(ctHash), address(this));\\n    }\\n\\n    /// @notice Grants permission to the current contract to operate on the encrypted address\\n    /// @dev Allows this contract to access the ciphertext\\n    /// @param ctHash The encrypted address value to grant access to\\n    function allowThis(eaddress ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(eaddress.unwrap(ctHash), address(this));\\n    }\\n\\n    /// @notice Grants permission to the message sender to operate on the encrypted boolean value\\n    /// @dev Allows the transaction sender to access the ciphertext\\n    /// @param ctHash The encrypted boolean value to grant access to\\n    function allowSender(ebool ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(ebool.unwrap(ctHash), msg.sender);\\n    }\\n\\n    /// @notice Grants permission to the message sender to operate on the encrypted 8-bit unsigned integer\\n    /// @dev Allows the transaction sender to access the ciphertext\\n    /// @param ctHash The encrypted uint8 value to grant access to\\n    function allowSender(euint8 ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(euint8.unwrap(ctHash), msg.sender);\\n    }\\n\\n    /// @notice Grants permission to the message sender to operate on the encrypted 16-bit unsigned integer\\n    /// @dev Allows the transaction sender to access the ciphertext\\n    /// @param ctHash The encrypted uint16 value to grant access to\\n    function allowSender(euint16 ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(euint16.unwrap(ctHash), msg.sender);\\n    }\\n\\n    /// @notice Grants permission to the message sender to operate on the encrypted 32-bit unsigned integer\\n    /// @dev Allows the transaction sender to access the ciphertext\\n    /// @param ctHash The encrypted uint32 value to grant access to\\n    function allowSender(euint32 ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(euint32.unwrap(ctHash), msg.sender);\\n    }\\n\\n    /// @notice Grants permission to the message sender to operate on the encrypted 64-bit unsigned integer\\n    /// @dev Allows the transaction sender to access the ciphertext\\n    /// @param ctHash The encrypted uint64 value to grant access to\\n    function allowSender(euint64 ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(euint64.unwrap(ctHash), msg.sender);\\n    }\\n\\n    /// @notice Grants permission to the message sender to operate on the encrypted 128-bit unsigned integer\\n    /// @dev Allows the transaction sender to access the ciphertext\\n    /// @param ctHash The encrypted uint128 value to grant access to\\n    function allowSender(euint128 ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(euint128.unwrap(ctHash), msg.sender);\\n    }\\n\\n    /// @notice Grants permission to the message sender to operate on the encrypted 256-bit unsigned integer\\n    /// @dev Allows the transaction sender to access the ciphertext\\n    /// @param ctHash The encrypted uint256 value to grant access to\\n    function allowSender(euint256 ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(euint256.unwrap(ctHash), msg.sender);\\n    }\\n\\n    /// @notice Grants permission to the message sender to operate on the encrypted address\\n    /// @dev Allows the transaction sender to access the ciphertext\\n    /// @param ctHash The encrypted address value to grant access to\\n    function allowSender(eaddress ctHash) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allow(eaddress.unwrap(ctHash), msg.sender);\\n    }\\n\\n    /// @notice Grants temporary permission to an account to operate on the encrypted boolean value\\n    /// @dev Allows the specified account to access the ciphertext for the current transaction only\\n    /// @param ctHash The encrypted boolean value to grant temporary access to\\n    /// @param account The address being granted temporary permission\\n    function allowTransient(ebool ctHash, address account) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allowTransient(ebool.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Grants temporary permission to an account to operate on the encrypted 8-bit unsigned integer\\n    /// @dev Allows the specified account to access the ciphertext for the current transaction only\\n    /// @param ctHash The encrypted uint8 value to grant temporary access to\\n    /// @param account The address being granted temporary permission\\n    function allowTransient(euint8 ctHash, address account) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allowTransient(euint8.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Grants temporary permission to an account to operate on the encrypted 16-bit unsigned integer\\n    /// @dev Allows the specified account to access the ciphertext for the current transaction only\\n    /// @param ctHash The encrypted uint16 value to grant temporary access to\\n    /// @param account The address being granted temporary permission\\n    function allowTransient(euint16 ctHash, address account) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allowTransient(euint16.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Grants temporary permission to an account to operate on the encrypted 32-bit unsigned integer\\n    /// @dev Allows the specified account to access the ciphertext for the current transaction only\\n    /// @param ctHash The encrypted uint32 value to grant temporary access to\\n    /// @param account The address being granted temporary permission\\n    function allowTransient(euint32 ctHash, address account) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allowTransient(euint32.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Grants temporary permission to an account to operate on the encrypted 64-bit unsigned integer\\n    /// @dev Allows the specified account to access the ciphertext for the current transaction only\\n    /// @param ctHash The encrypted uint64 value to grant temporary access to\\n    /// @param account The address being granted temporary permission\\n    function allowTransient(euint64 ctHash, address account) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allowTransient(euint64.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Grants temporary permission to an account to operate on the encrypted 128-bit unsigned integer\\n    /// @dev Allows the specified account to access the ciphertext for the current transaction only\\n    /// @param ctHash The encrypted uint128 value to grant temporary access to\\n    /// @param account The address being granted temporary permission\\n    function allowTransient(euint128 ctHash, address account) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allowTransient(euint128.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Grants temporary permission to an account to operate on the encrypted 256-bit unsigned integer\\n    /// @dev Allows the specified account to access the ciphertext for the current transaction only\\n    /// @param ctHash The encrypted uint256 value to grant temporary access to\\n    /// @param account The address being granted temporary permission\\n    function allowTransient(euint256 ctHash, address account) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allowTransient(euint256.unwrap(ctHash), account);\\n    }\\n\\n    /// @notice Grants temporary permission to an account to operate on the encrypted address\\n    /// @dev Allows the specified account to access the ciphertext for the current transaction only\\n    /// @param ctHash The encrypted address value to grant temporary access to\\n    /// @param account The address being granted temporary permission\\n    function allowTransient(eaddress ctHash, address account) internal {\\n        ITaskManager(TASK_MANAGER_ADDRESS).allowTransient(eaddress.unwrap(ctHash), account);\\n    }\\n\\n\\n}\\n// ********** BINDING DEFS ************* //\\n\\nusing BindingsEbool for ebool global;\\nlibrary BindingsEbool {\\n\\n    /// @notice Performs the eq operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type ebool\\n    /// @param rhs second input of type ebool\\n    /// @return the result of the eq\\n    function eq(ebool lhs, ebool rhs) internal returns (ebool) {\\n        return FHE.eq(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the ne operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type ebool\\n    /// @param rhs second input of type ebool\\n    /// @return the result of the ne\\n    function ne(ebool lhs, ebool rhs) internal returns (ebool) {\\n        return FHE.ne(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the not operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type ebool\\n    /// @return the result of the not\\n    function not(ebool lhs) internal returns (ebool) {\\n        return FHE.not(lhs);\\n    }\\n\\n    /// @notice Performs the and operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type ebool\\n    /// @param rhs second input of type ebool\\n    /// @return the result of the and\\n    function and(ebool lhs, ebool rhs) internal returns (ebool) {\\n        return FHE.and(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the or operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type ebool\\n    /// @param rhs second input of type ebool\\n    /// @return the result of the or\\n    function or(ebool lhs, ebool rhs) internal returns (ebool) {\\n        return FHE.or(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the xor operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type ebool\\n    /// @param rhs second input of type ebool\\n    /// @return the result of the xor\\n    function xor(ebool lhs, ebool rhs) internal returns (ebool) {\\n        return FHE.xor(lhs, rhs);\\n    }\\n    function toU8(ebool value) internal returns (euint8) {\\n        return FHE.asEuint8(value);\\n    }\\n    function toU16(ebool value) internal returns (euint16) {\\n        return FHE.asEuint16(value);\\n    }\\n    function toU32(ebool value) internal returns (euint32) {\\n        return FHE.asEuint32(value);\\n    }\\n    function toU64(ebool value) internal returns (euint64) {\\n        return FHE.asEuint64(value);\\n    }\\n    function toU128(ebool value) internal returns (euint128) {\\n        return FHE.asEuint128(value);\\n    }\\n    function toU256(ebool value) internal returns (euint256) {\\n        return FHE.asEuint256(value);\\n    }\\n    function decrypt(ebool value) internal {\\n        FHE.decrypt(value);\\n    }\\n    function allow(ebool ctHash, address account) internal {\\n        FHE.allow(ctHash, account);\\n    }\\n    function isAllowed(ebool ctHash, address account) internal returns (bool) {\\n        return FHE.isAllowed(ctHash, account);\\n    }\\n    function allowThis(ebool ctHash) internal {\\n        FHE.allowThis(ctHash);\\n    }\\n    function allowGlobal(ebool ctHash) internal {\\n        FHE.allowGlobal(ctHash);\\n    }\\n    function allowSender(ebool ctHash) internal {\\n        FHE.allowSender(ctHash);\\n    }\\n    function allowTransient(ebool ctHash, address account) internal {\\n        FHE.allowTransient(ctHash, account);\\n    }\\n}\\n\\nusing BindingsEuint8 for euint8 global;\\nlibrary BindingsEuint8 {\\n\\n    /// @notice Performs the add operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the add\\n    function add(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        return FHE.add(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the mul operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the mul\\n    function mul(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        return FHE.mul(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the div operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the div\\n    function div(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        return FHE.div(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the sub operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the sub\\n    function sub(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        return FHE.sub(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the eq operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the eq\\n    function eq(euint8 lhs, euint8 rhs) internal returns (ebool) {\\n        return FHE.eq(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the ne operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the ne\\n    function ne(euint8 lhs, euint8 rhs) internal returns (ebool) {\\n        return FHE.ne(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the not operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the not\\n    function not(euint8 lhs) internal returns (euint8) {\\n        return FHE.not(lhs);\\n    }\\n\\n    /// @notice Performs the and operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the and\\n    function and(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        return FHE.and(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the or operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the or\\n    function or(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        return FHE.or(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the xor operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the xor\\n    function xor(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        return FHE.xor(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the gt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the gt\\n    function gt(euint8 lhs, euint8 rhs) internal returns (ebool) {\\n        return FHE.gt(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the gte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the gte\\n    function gte(euint8 lhs, euint8 rhs) internal returns (ebool) {\\n        return FHE.gte(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the lt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the lt\\n    function lt(euint8 lhs, euint8 rhs) internal returns (ebool) {\\n        return FHE.lt(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the lte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the lte\\n    function lte(euint8 lhs, euint8 rhs) internal returns (ebool) {\\n        return FHE.lte(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the rem operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the rem\\n    function rem(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        return FHE.rem(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the max operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the max\\n    function max(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        return FHE.max(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the min operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the min\\n    function min(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        return FHE.min(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the shl operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the shl\\n    function shl(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        return FHE.shl(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the shr operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the shr\\n    function shr(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        return FHE.shr(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the rol operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the rol\\n    function rol(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        return FHE.rol(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the ror operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @param rhs second input of type euint8\\n    /// @return the result of the ror\\n    function ror(euint8 lhs, euint8 rhs) internal returns (euint8) {\\n        return FHE.ror(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the square operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint8\\n    /// @return the result of the square\\n    function square(euint8 lhs) internal returns (euint8) {\\n        return FHE.square(lhs);\\n    }\\n    function toBool(euint8 value) internal  returns (ebool) {\\n        return FHE.asEbool(value);\\n    }\\n    function toU16(euint8 value) internal returns (euint16) {\\n        return FHE.asEuint16(value);\\n    }\\n    function toU32(euint8 value) internal returns (euint32) {\\n        return FHE.asEuint32(value);\\n    }\\n    function toU64(euint8 value) internal returns (euint64) {\\n        return FHE.asEuint64(value);\\n    }\\n    function toU128(euint8 value) internal returns (euint128) {\\n        return FHE.asEuint128(value);\\n    }\\n    function toU256(euint8 value) internal returns (euint256) {\\n        return FHE.asEuint256(value);\\n    }\\n    function decrypt(euint8 value) internal {\\n        FHE.decrypt(value);\\n    }\\n    function allow(euint8 ctHash, address account) internal {\\n        FHE.allow(ctHash, account);\\n    }\\n    function isAllowed(euint8 ctHash, address account) internal returns (bool) {\\n        return FHE.isAllowed(ctHash, account);\\n    }\\n    function allowThis(euint8 ctHash) internal {\\n        FHE.allowThis(ctHash);\\n    }\\n    function allowGlobal(euint8 ctHash) internal {\\n        FHE.allowGlobal(ctHash);\\n    }\\n    function allowSender(euint8 ctHash) internal {\\n        FHE.allowSender(ctHash);\\n    }\\n    function allowTransient(euint8 ctHash, address account) internal {\\n        FHE.allowTransient(ctHash, account);\\n    }\\n}\\n\\nusing BindingsEuint16 for euint16 global;\\nlibrary BindingsEuint16 {\\n\\n    /// @notice Performs the add operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the add\\n    function add(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        return FHE.add(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the mul operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the mul\\n    function mul(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        return FHE.mul(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the div operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the div\\n    function div(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        return FHE.div(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the sub operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the sub\\n    function sub(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        return FHE.sub(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the eq operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the eq\\n    function eq(euint16 lhs, euint16 rhs) internal returns (ebool) {\\n        return FHE.eq(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the ne operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the ne\\n    function ne(euint16 lhs, euint16 rhs) internal returns (ebool) {\\n        return FHE.ne(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the not operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the not\\n    function not(euint16 lhs) internal returns (euint16) {\\n        return FHE.not(lhs);\\n    }\\n\\n    /// @notice Performs the and operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the and\\n    function and(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        return FHE.and(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the or operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the or\\n    function or(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        return FHE.or(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the xor operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the xor\\n    function xor(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        return FHE.xor(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the gt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the gt\\n    function gt(euint16 lhs, euint16 rhs) internal returns (ebool) {\\n        return FHE.gt(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the gte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the gte\\n    function gte(euint16 lhs, euint16 rhs) internal returns (ebool) {\\n        return FHE.gte(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the lt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the lt\\n    function lt(euint16 lhs, euint16 rhs) internal returns (ebool) {\\n        return FHE.lt(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the lte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the lte\\n    function lte(euint16 lhs, euint16 rhs) internal returns (ebool) {\\n        return FHE.lte(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the rem operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the rem\\n    function rem(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        return FHE.rem(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the max operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the max\\n    function max(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        return FHE.max(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the min operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the min\\n    function min(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        return FHE.min(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the shl operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the shl\\n    function shl(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        return FHE.shl(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the shr operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the shr\\n    function shr(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        return FHE.shr(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the rol operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the rol\\n    function rol(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        return FHE.rol(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the ror operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @param rhs second input of type euint16\\n    /// @return the result of the ror\\n    function ror(euint16 lhs, euint16 rhs) internal returns (euint16) {\\n        return FHE.ror(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the square operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint16\\n    /// @return the result of the square\\n    function square(euint16 lhs) internal returns (euint16) {\\n        return FHE.square(lhs);\\n    }\\n    function toBool(euint16 value) internal  returns (ebool) {\\n        return FHE.asEbool(value);\\n    }\\n    function toU8(euint16 value) internal returns (euint8) {\\n        return FHE.asEuint8(value);\\n    }\\n    function toU32(euint16 value) internal returns (euint32) {\\n        return FHE.asEuint32(value);\\n    }\\n    function toU64(euint16 value) internal returns (euint64) {\\n        return FHE.asEuint64(value);\\n    }\\n    function toU128(euint16 value) internal returns (euint128) {\\n        return FHE.asEuint128(value);\\n    }\\n    function toU256(euint16 value) internal returns (euint256) {\\n        return FHE.asEuint256(value);\\n    }\\n    function decrypt(euint16 value) internal {\\n        FHE.decrypt(value);\\n    }\\n    function allow(euint16 ctHash, address account) internal {\\n        FHE.allow(ctHash, account);\\n    }\\n    function isAllowed(euint16 ctHash, address account) internal returns (bool) {\\n        return FHE.isAllowed(ctHash, account);\\n    }\\n    function allowThis(euint16 ctHash) internal {\\n        FHE.allowThis(ctHash);\\n    }\\n    function allowGlobal(euint16 ctHash) internal {\\n        FHE.allowGlobal(ctHash);\\n    }\\n    function allowSender(euint16 ctHash) internal {\\n        FHE.allowSender(ctHash);\\n    }\\n    function allowTransient(euint16 ctHash, address account) internal {\\n        FHE.allowTransient(ctHash, account);\\n    }\\n}\\n\\nusing BindingsEuint32 for euint32 global;\\nlibrary BindingsEuint32 {\\n\\n    /// @notice Performs the add operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the add\\n    function add(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        return FHE.add(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the mul operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the mul\\n    function mul(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        return FHE.mul(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the div operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the div\\n    function div(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        return FHE.div(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the sub operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the sub\\n    function sub(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        return FHE.sub(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the eq operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the eq\\n    function eq(euint32 lhs, euint32 rhs) internal returns (ebool) {\\n        return FHE.eq(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the ne operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the ne\\n    function ne(euint32 lhs, euint32 rhs) internal returns (ebool) {\\n        return FHE.ne(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the not operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the not\\n    function not(euint32 lhs) internal returns (euint32) {\\n        return FHE.not(lhs);\\n    }\\n\\n    /// @notice Performs the and operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the and\\n    function and(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        return FHE.and(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the or operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the or\\n    function or(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        return FHE.or(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the xor operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the xor\\n    function xor(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        return FHE.xor(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the gt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the gt\\n    function gt(euint32 lhs, euint32 rhs) internal returns (ebool) {\\n        return FHE.gt(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the gte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the gte\\n    function gte(euint32 lhs, euint32 rhs) internal returns (ebool) {\\n        return FHE.gte(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the lt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the lt\\n    function lt(euint32 lhs, euint32 rhs) internal returns (ebool) {\\n        return FHE.lt(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the lte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the lte\\n    function lte(euint32 lhs, euint32 rhs) internal returns (ebool) {\\n        return FHE.lte(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the rem operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the rem\\n    function rem(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        return FHE.rem(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the max operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the max\\n    function max(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        return FHE.max(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the min operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the min\\n    function min(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        return FHE.min(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the shl operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the shl\\n    function shl(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        return FHE.shl(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the shr operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the shr\\n    function shr(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        return FHE.shr(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the rol operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the rol\\n    function rol(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        return FHE.rol(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the ror operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @param rhs second input of type euint32\\n    /// @return the result of the ror\\n    function ror(euint32 lhs, euint32 rhs) internal returns (euint32) {\\n        return FHE.ror(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the square operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint32\\n    /// @return the result of the square\\n    function square(euint32 lhs) internal returns (euint32) {\\n        return FHE.square(lhs);\\n    }\\n    function toBool(euint32 value) internal  returns (ebool) {\\n        return FHE.asEbool(value);\\n    }\\n    function toU8(euint32 value) internal returns (euint8) {\\n        return FHE.asEuint8(value);\\n    }\\n    function toU16(euint32 value) internal returns (euint16) {\\n        return FHE.asEuint16(value);\\n    }\\n    function toU64(euint32 value) internal returns (euint64) {\\n        return FHE.asEuint64(value);\\n    }\\n    function toU128(euint32 value) internal returns (euint128) {\\n        return FHE.asEuint128(value);\\n    }\\n    function toU256(euint32 value) internal returns (euint256) {\\n        return FHE.asEuint256(value);\\n    }\\n    function decrypt(euint32 value) internal {\\n        FHE.decrypt(value);\\n    }\\n    function allow(euint32 ctHash, address account) internal {\\n        FHE.allow(ctHash, account);\\n    }\\n    function isAllowed(euint32 ctHash, address account) internal returns (bool) {\\n        return FHE.isAllowed(ctHash, account);\\n    }\\n    function allowThis(euint32 ctHash) internal {\\n        FHE.allowThis(ctHash);\\n    }\\n    function allowGlobal(euint32 ctHash) internal {\\n        FHE.allowGlobal(ctHash);\\n    }\\n    function allowSender(euint32 ctHash) internal {\\n        FHE.allowSender(ctHash);\\n    }\\n    function allowTransient(euint32 ctHash, address account) internal {\\n        FHE.allowTransient(ctHash, account);\\n    }\\n}\\n\\nusing BindingsEuint64 for euint64 global;\\nlibrary BindingsEuint64 {\\n\\n    /// @notice Performs the add operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return the result of the add\\n    function add(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        return FHE.add(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the mul operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return the result of the mul\\n    function mul(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        return FHE.mul(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the sub operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return the result of the sub\\n    function sub(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        return FHE.sub(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the eq operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return the result of the eq\\n    function eq(euint64 lhs, euint64 rhs) internal returns (ebool) {\\n        return FHE.eq(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the ne operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return the result of the ne\\n    function ne(euint64 lhs, euint64 rhs) internal returns (ebool) {\\n        return FHE.ne(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the not operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @return the result of the not\\n    function not(euint64 lhs) internal returns (euint64) {\\n        return FHE.not(lhs);\\n    }\\n\\n    /// @notice Performs the and operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return the result of the and\\n    function and(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        return FHE.and(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the or operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return the result of the or\\n    function or(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        return FHE.or(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the xor operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return the result of the xor\\n    function xor(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        return FHE.xor(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the gt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return the result of the gt\\n    function gt(euint64 lhs, euint64 rhs) internal returns (ebool) {\\n        return FHE.gt(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the gte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return the result of the gte\\n    function gte(euint64 lhs, euint64 rhs) internal returns (ebool) {\\n        return FHE.gte(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the lt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return the result of the lt\\n    function lt(euint64 lhs, euint64 rhs) internal returns (ebool) {\\n        return FHE.lt(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the lte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return the result of the lte\\n    function lte(euint64 lhs, euint64 rhs) internal returns (ebool) {\\n        return FHE.lte(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the max operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return the result of the max\\n    function max(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        return FHE.max(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the min operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return the result of the min\\n    function min(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        return FHE.min(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the shl operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return the result of the shl\\n    function shl(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        return FHE.shl(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the shr operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return the result of the shr\\n    function shr(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        return FHE.shr(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the rol operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return the result of the rol\\n    function rol(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        return FHE.rol(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the ror operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @param rhs second input of type euint64\\n    /// @return the result of the ror\\n    function ror(euint64 lhs, euint64 rhs) internal returns (euint64) {\\n        return FHE.ror(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the square operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint64\\n    /// @return the result of the square\\n    function square(euint64 lhs) internal returns (euint64) {\\n        return FHE.square(lhs);\\n    }\\n    function toBool(euint64 value) internal  returns (ebool) {\\n        return FHE.asEbool(value);\\n    }\\n    function toU8(euint64 value) internal returns (euint8) {\\n        return FHE.asEuint8(value);\\n    }\\n    function toU16(euint64 value) internal returns (euint16) {\\n        return FHE.asEuint16(value);\\n    }\\n    function toU32(euint64 value) internal returns (euint32) {\\n        return FHE.asEuint32(value);\\n    }\\n    function toU128(euint64 value) internal returns (euint128) {\\n        return FHE.asEuint128(value);\\n    }\\n    function toU256(euint64 value) internal returns (euint256) {\\n        return FHE.asEuint256(value);\\n    }\\n    function decrypt(euint64 value) internal {\\n        FHE.decrypt(value);\\n    }\\n    function allow(euint64 ctHash, address account) internal {\\n        FHE.allow(ctHash, account);\\n    }\\n    function isAllowed(euint64 ctHash, address account) internal returns (bool) {\\n        return FHE.isAllowed(ctHash, account);\\n    }\\n    function allowThis(euint64 ctHash) internal {\\n        FHE.allowThis(ctHash);\\n    }\\n    function allowGlobal(euint64 ctHash) internal {\\n        FHE.allowGlobal(ctHash);\\n    }\\n    function allowSender(euint64 ctHash) internal {\\n        FHE.allowSender(ctHash);\\n    }\\n    function allowTransient(euint64 ctHash, address account) internal {\\n        FHE.allowTransient(ctHash, account);\\n    }\\n}\\n\\nusing BindingsEuint128 for euint128 global;\\nlibrary BindingsEuint128 {\\n\\n    /// @notice Performs the add operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return the result of the add\\n    function add(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        return FHE.add(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the sub operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return the result of the sub\\n    function sub(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        return FHE.sub(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the eq operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return the result of the eq\\n    function eq(euint128 lhs, euint128 rhs) internal returns (ebool) {\\n        return FHE.eq(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the ne operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return the result of the ne\\n    function ne(euint128 lhs, euint128 rhs) internal returns (ebool) {\\n        return FHE.ne(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the not operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @return the result of the not\\n    function not(euint128 lhs) internal returns (euint128) {\\n        return FHE.not(lhs);\\n    }\\n\\n    /// @notice Performs the and operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return the result of the and\\n    function and(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        return FHE.and(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the or operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return the result of the or\\n    function or(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        return FHE.or(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the xor operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return the result of the xor\\n    function xor(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        return FHE.xor(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the gt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return the result of the gt\\n    function gt(euint128 lhs, euint128 rhs) internal returns (ebool) {\\n        return FHE.gt(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the gte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return the result of the gte\\n    function gte(euint128 lhs, euint128 rhs) internal returns (ebool) {\\n        return FHE.gte(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the lt operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return the result of the lt\\n    function lt(euint128 lhs, euint128 rhs) internal returns (ebool) {\\n        return FHE.lt(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the lte operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return the result of the lte\\n    function lte(euint128 lhs, euint128 rhs) internal returns (ebool) {\\n        return FHE.lte(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the max operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return the result of the max\\n    function max(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        return FHE.max(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the min operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return the result of the min\\n    function min(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        return FHE.min(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the shl operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return the result of the shl\\n    function shl(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        return FHE.shl(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the shr operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return the result of the shr\\n    function shr(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        return FHE.shr(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the rol operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return the result of the rol\\n    function rol(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        return FHE.rol(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the ror operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint128\\n    /// @param rhs second input of type euint128\\n    /// @return the result of the ror\\n    function ror(euint128 lhs, euint128 rhs) internal returns (euint128) {\\n        return FHE.ror(lhs, rhs);\\n    }\\n    function toBool(euint128 value) internal  returns (ebool) {\\n        return FHE.asEbool(value);\\n    }\\n    function toU8(euint128 value) internal returns (euint8) {\\n        return FHE.asEuint8(value);\\n    }\\n    function toU16(euint128 value) internal returns (euint16) {\\n        return FHE.asEuint16(value);\\n    }\\n    function toU32(euint128 value) internal returns (euint32) {\\n        return FHE.asEuint32(value);\\n    }\\n    function toU64(euint128 value) internal returns (euint64) {\\n        return FHE.asEuint64(value);\\n    }\\n    function toU256(euint128 value) internal returns (euint256) {\\n        return FHE.asEuint256(value);\\n    }\\n    function decrypt(euint128 value) internal {\\n        FHE.decrypt(value);\\n    }\\n    function allow(euint128 ctHash, address account) internal {\\n        FHE.allow(ctHash, account);\\n    }\\n    function isAllowed(euint128 ctHash, address account) internal returns (bool) {\\n        return FHE.isAllowed(ctHash, account);\\n    }\\n    function allowThis(euint128 ctHash) internal {\\n        FHE.allowThis(ctHash);\\n    }\\n    function allowGlobal(euint128 ctHash) internal {\\n        FHE.allowGlobal(ctHash);\\n    }\\n    function allowSender(euint128 ctHash) internal {\\n        FHE.allowSender(ctHash);\\n    }\\n    function allowTransient(euint128 ctHash, address account) internal {\\n        FHE.allowTransient(ctHash, account);\\n    }\\n}\\n\\nusing BindingsEuint256 for euint256 global;\\nlibrary BindingsEuint256 {\\n\\n    /// @notice Performs the eq operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return the result of the eq\\n    function eq(euint256 lhs, euint256 rhs) internal returns (ebool) {\\n        return FHE.eq(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the ne operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type euint256\\n    /// @param rhs second input of type euint256\\n    /// @return the result of the ne\\n    function ne(euint256 lhs, euint256 rhs) internal returns (ebool) {\\n        return FHE.ne(lhs, rhs);\\n    }\\n    function toBool(euint256 value) internal  returns (ebool) {\\n        return FHE.asEbool(value);\\n    }\\n    function toU8(euint256 value) internal returns (euint8) {\\n        return FHE.asEuint8(value);\\n    }\\n    function toU16(euint256 value) internal returns (euint16) {\\n        return FHE.asEuint16(value);\\n    }\\n    function toU32(euint256 value) internal returns (euint32) {\\n        return FHE.asEuint32(value);\\n    }\\n    function toU64(euint256 value) internal returns (euint64) {\\n        return FHE.asEuint64(value);\\n    }\\n    function toU128(euint256 value) internal returns (euint128) {\\n        return FHE.asEuint128(value);\\n    }\\n    function toEaddress(euint256 value) internal returns (eaddress) {\\n        return FHE.asEaddress(value);\\n    }\\n    function decrypt(euint256 value) internal {\\n        FHE.decrypt(value);\\n    }\\n    function allow(euint256 ctHash, address account) internal {\\n        FHE.allow(ctHash, account);\\n    }\\n    function isAllowed(euint256 ctHash, address account) internal returns (bool) {\\n        return FHE.isAllowed(ctHash, account);\\n    }\\n    function allowThis(euint256 ctHash) internal {\\n        FHE.allowThis(ctHash);\\n    }\\n    function allowGlobal(euint256 ctHash) internal {\\n        FHE.allowGlobal(ctHash);\\n    }\\n    function allowSender(euint256 ctHash) internal {\\n        FHE.allowSender(ctHash);\\n    }\\n    function allowTransient(euint256 ctHash, address account) internal {\\n        FHE.allowTransient(ctHash, account);\\n    }\\n}\\n\\nusing BindingsEaddress for eaddress global;\\nlibrary BindingsEaddress {\\n\\n    /// @notice Performs the eq operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type eaddress\\n    /// @param rhs second input of type eaddress\\n    /// @return the result of the eq\\n    function eq(eaddress lhs, eaddress rhs) internal returns (ebool) {\\n        return FHE.eq(lhs, rhs);\\n    }\\n\\n    /// @notice Performs the ne operation\\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\\n    /// @param lhs input of type eaddress\\n    /// @param rhs second input of type eaddress\\n    /// @return the result of the ne\\n    function ne(eaddress lhs, eaddress rhs) internal returns (ebool) {\\n        return FHE.ne(lhs, rhs);\\n    }\\n    function toBool(eaddress value) internal  returns (ebool) {\\n        return FHE.asEbool(value);\\n    }\\n    function toU8(eaddress value) internal returns (euint8) {\\n        return FHE.asEuint8(value);\\n    }\\n    function toU16(eaddress value) internal returns (euint16) {\\n        return FHE.asEuint16(value);\\n    }\\n    function toU32(eaddress value) internal returns (euint32) {\\n        return FHE.asEuint32(value);\\n    }\\n    function toU64(eaddress value) internal returns (euint64) {\\n        return FHE.asEuint64(value);\\n    }\\n    function toU128(eaddress value) internal returns (euint128) {\\n        return FHE.asEuint128(value);\\n    }\\n    function toU256(eaddress value) internal returns (euint256) {\\n        return FHE.asEuint256(value);\\n    }\\n    function decrypt(eaddress value) internal {\\n        FHE.decrypt(value);\\n    }\\n    function allow(eaddress ctHash, address account) internal {\\n        FHE.allow(ctHash, account);\\n    }\\n    function isAllowed(eaddress ctHash, address account) internal returns (bool) {\\n        return FHE.isAllowed(ctHash, account);\\n    }\\n    function allowThis(eaddress ctHash) internal {\\n        FHE.allowThis(ctHash);\\n    }\\n    function allowGlobal(eaddress ctHash) internal {\\n        FHE.allowGlobal(ctHash);\\n    }\\n    function allowSender(eaddress ctHash) internal {\\n        FHE.allowSender(ctHash);\\n    }\\n    function allowTransient(eaddress ctHash, address account) internal {\\n        FHE.allowTransient(ctHash, account);\\n    }\\n}\\n\",\"keccak256\":\"0x1ef83b66db01d3252557ae8b22553920966b864e9de79134039a80368eaae573\",\"license\":\"BSD-3-Clause-Clear\"},\"@fhenixprotocol/cofhe-contracts/ICofhe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.25 <0.9.0;\\n\\nstruct EncryptedInput {\\n    uint256 ctHash;\\n    uint8 securityZone;\\n    uint8 utype;\\n    bytes signature;\\n}\\n\\nstruct InEbool {\\n    uint256 ctHash;\\n    uint8 securityZone;\\n    uint8 utype;\\n    bytes signature;\\n}\\n\\nstruct InEuint8 {\\n    uint256 ctHash;\\n    uint8 securityZone;\\n    uint8 utype;\\n    bytes signature;\\n}\\n\\nstruct InEuint16 {\\n    uint256 ctHash;\\n    uint8 securityZone;\\n    uint8 utype;\\n    bytes signature;\\n}\\n\\nstruct InEuint32 {\\n    uint256 ctHash;\\n    uint8 securityZone;\\n    uint8 utype;\\n    bytes signature;\\n}\\n\\nstruct InEuint64 {\\n    uint256 ctHash;\\n    uint8 securityZone;\\n    uint8 utype;\\n    bytes signature;\\n}\\n\\nstruct InEuint128 {\\n    uint256 ctHash;\\n    uint8 securityZone;\\n    uint8 utype;\\n    bytes signature;\\n}\\n\\nstruct InEuint256 {\\n    uint256 ctHash;\\n    uint8 securityZone;\\n    uint8 utype;\\n    bytes signature;\\n}\\nstruct InEaddress {\\n    uint256 ctHash;\\n    uint8 securityZone;\\n    uint8 utype;\\n    bytes signature;\\n}\\n\\n\\n// Order is set as in fheos/precompiles/types/types.go\\nenum FunctionId {\\n    _0,             // 0 - GetNetworkKey\\n    _1,             // 1 - Verify\\n    cast,           // 2\\n    sealoutput,     // 3\\n    select,         // 4 - select\\n    _5,             // 5 - req\\n    decrypt,        // 6\\n    sub,            // 7\\n    add,            // 8\\n    xor,            // 9\\n    and,            // 10\\n    or,             // 11\\n    not,            // 12\\n    div,            // 13\\n    rem,            // 14\\n    mul,            // 15\\n    shl,            // 16\\n    shr,            // 17\\n    gte,            // 18\\n    lte,            // 19\\n    lt,             // 20\\n    gt,             // 21\\n    min,            // 22\\n    max,            // 23\\n    eq,             // 24\\n    ne,             // 25\\n    trivialEncrypt, // 26\\n    random,         // 27\\n    rol,            // 28\\n    ror,            // 29\\n    square,         // 30\\n    _31             // 31\\n}\\n\\ninterface ITaskManager {\\n    function createTask(uint8 returnType, FunctionId funcId, uint256[] memory encryptedInputs, uint256[] memory extraInputs) external returns (uint256);\\n\\n    function createDecryptTask(uint256 ctHash, address requestor) external;\\n    function verifyInput(EncryptedInput memory input, address sender) external returns (uint256);\\n\\n    function allow(uint256 ctHash, address account) external;\\n    function isAllowed(uint256 ctHash, address account) external returns (bool);\\n    function allowGlobal(uint256 ctHash) external;\\n    function allowTransient(uint256 ctHash, address account) external;\\n    function getDecryptResultSafe(uint256 ctHash) external view returns (uint256, bool);\\n    function getDecryptResult(uint256 ctHash) external view returns (uint256);\\n}\\n\\nlibrary Utils {\\n    // Values used to communicate types to the runtime.\\n    // Must match values defined in warp-drive protobufs for everything to\\n    uint8 internal constant EUINT8_TFHE = 2;\\n    uint8 internal constant EUINT16_TFHE = 3;\\n    uint8 internal constant EUINT32_TFHE = 4;\\n    uint8 internal constant EUINT64_TFHE = 5;\\n    uint8 internal constant EUINT128_TFHE = 6;\\n    uint8 internal constant EUINT256_TFHE = 8;\\n    uint8 internal constant EADDRESS_TFHE = 7;\\n    uint8 internal constant EBOOL_TFHE = 0;\\n\\n    function functionIdToString(FunctionId _functionId) internal pure returns (string memory) {\\n        if (_functionId == FunctionId.cast) return \\\"cast\\\";\\n        if (_functionId == FunctionId.sealoutput) return \\\"sealOutput\\\";\\n        if (_functionId == FunctionId.select) return \\\"select\\\";\\n        if (_functionId == FunctionId.decrypt) return \\\"decrypt\\\";\\n        if (_functionId == FunctionId.sub) return \\\"sub\\\";\\n        if (_functionId == FunctionId.add) return \\\"add\\\";\\n        if (_functionId == FunctionId.xor) return \\\"xor\\\";\\n        if (_functionId == FunctionId.and) return \\\"and\\\";\\n        if (_functionId == FunctionId.or) return \\\"or\\\";\\n        if (_functionId == FunctionId.not) return \\\"not\\\";\\n        if (_functionId == FunctionId.div) return \\\"div\\\";\\n        if (_functionId == FunctionId.rem) return \\\"rem\\\";\\n        if (_functionId == FunctionId.mul) return \\\"mul\\\";\\n        if (_functionId == FunctionId.shl) return \\\"shl\\\";\\n        if (_functionId == FunctionId.shr) return \\\"shr\\\";\\n        if (_functionId == FunctionId.gte) return \\\"gte\\\";\\n        if (_functionId == FunctionId.lte) return \\\"lte\\\";\\n        if (_functionId == FunctionId.lt) return \\\"lt\\\";\\n        if (_functionId == FunctionId.gt) return \\\"gt\\\";\\n        if (_functionId == FunctionId.min) return \\\"min\\\";\\n        if (_functionId == FunctionId.max) return \\\"max\\\";\\n        if (_functionId == FunctionId.eq) return \\\"eq\\\";\\n        if (_functionId == FunctionId.ne) return \\\"ne\\\";\\n        if (_functionId == FunctionId.trivialEncrypt) return \\\"trivialEncrypt\\\";\\n        if (_functionId == FunctionId.random) return \\\"random\\\";\\n        if (_functionId == FunctionId.rol) return \\\"rol\\\";\\n        if (_functionId == FunctionId.ror) return \\\"ror\\\";\\n        if (_functionId == FunctionId.square) return \\\"square\\\";\\n\\n        return \\\"\\\";\\n    }\\n\\n    function inputFromEbool(InEbool memory input) internal pure returns (EncryptedInput memory) {\\n        return EncryptedInput({\\n            ctHash: input.ctHash,\\n            securityZone: input.securityZone,\\n            utype: EBOOL_TFHE,\\n            signature: input.signature\\n        });\\n    }\\n\\n    function inputFromEuint8(InEuint8 memory input) internal pure returns (EncryptedInput memory) {\\n        return EncryptedInput({\\n            ctHash: input.ctHash,\\n            securityZone: input.securityZone,\\n            utype: EUINT8_TFHE,\\n            signature: input.signature\\n        });\\n    }\\n\\n    function inputFromEuint16(InEuint16 memory input) internal pure returns (EncryptedInput memory) {\\n        return EncryptedInput({\\n            ctHash: input.ctHash,\\n            securityZone: input.securityZone,\\n            utype: EUINT16_TFHE,\\n            signature: input.signature\\n        });\\n    }\\n\\n    function inputFromEuint32(InEuint32 memory input) internal pure returns (EncryptedInput memory) {\\n        return EncryptedInput({\\n            ctHash: input.ctHash,\\n            securityZone: input.securityZone,\\n            utype: EUINT32_TFHE,\\n            signature: input.signature\\n        });\\n    }\\n\\n    function inputFromEuint64(InEuint64 memory input) internal pure returns (EncryptedInput memory) {\\n        return EncryptedInput({\\n            ctHash: input.ctHash,\\n            securityZone: input.securityZone,\\n            utype: EUINT64_TFHE,\\n            signature: input.signature\\n        });\\n    }\\n\\n    function inputFromEuint128(InEuint128 memory input) internal pure returns (EncryptedInput memory) {\\n        return EncryptedInput({\\n            ctHash: input.ctHash,\\n            securityZone: input.securityZone,\\n            utype: EUINT128_TFHE,\\n            signature: input.signature\\n        });\\n    }\\n\\n    function inputFromEuint256(InEuint256 memory input) internal pure returns (EncryptedInput memory) {\\n        return EncryptedInput({\\n            ctHash: input.ctHash,\\n            securityZone: input.securityZone,\\n            utype: EUINT256_TFHE,\\n            signature: input.signature\\n        });\\n    }\\n\\n    function inputFromEaddress(InEaddress memory input) internal pure returns (EncryptedInput memory) {\\n        return EncryptedInput({\\n            ctHash: input.ctHash,\\n            securityZone: input.securityZone,\\n            utype: EADDRESS_TFHE,\\n            signature: input.signature\\n        });\\n    }\\n}\",\"keccak256\":\"0x4f1bb532cd152e124638f5957ee43848d82a34df1c540c5dbf99ea72359e2db3\",\"license\":\"UNLICENSED\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/BlindMatch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@fhenixprotocol/cofhe-contracts/FHE.sol\\\";\\n\\ncontract BlindMatch {\\n    // Interest categories (8 interests for gas efficiency)\\n    uint8 public constant TOTAL_INTERESTS = 8;\\n    uint8 public constant MIN_INTERESTS = 4;\\n\\n    // Similarity threshold for matching (out of 8 possible common interests)\\n    uint8 public constant MATCH_THRESHOLD = 3; // ~38% similarity (3 out of 8)\\n\\n    struct UserProfile {\\n        bool exists;\\n        euint8 interestsBitmap; // 8-bit encrypted bitmap of interests\\n        address[] matches;\\n        uint256 profileCreatedAt;\\n    }\\n\\n    struct MatchRequest {\\n        address requester;\\n        address target;\\n        euint8 similarityScore;\\n        bool scoreDecrypted;\\n        uint8 decryptedScore;\\n        bool processed;\\n        uint256 timestamp;\\n        ebool isMatchEncrypted;\\n        bool matchDecrypted;\\n        bool isMatch;\\n    }\\n\\n    mapping(address => UserProfile) public profiles;\\n    mapping(bytes32 => MatchRequest) public matchRequests;\\n    address[] public allUsers;\\n\\n    // Events\\n    event ProfileCreated(address indexed user, uint256 timestamp);\\n    event MatchRequested(address indexed requester, address indexed target, bytes32 requestId);\\n    event MatchFound(address indexed user1, address indexed user2, uint256 timestamp);\\n    event SimilarityCalculated(address indexed user1, address indexed user2, bytes32 requestId);\\n    event MatchDecryptionRequested(bytes32 indexed requestId);\\n    event ScoreDecryptionRequested(bytes32 indexed requestId);\\n    event MatchDecrypted(bytes32 indexed requestId, bool isMatch);\\n    event ScoreDecrypted(bytes32 indexed requestId, uint8 score);\\n\\n    modifier onlyRegisteredUser() {\\n        require(profiles[msg.sender].exists, \\\"User not registered\\\");\\n        _;\\n    }\\n\\n    modifier userExists(address user) {\\n        require(profiles[user].exists, \\\"Target user does not exist\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Submit user profile with encrypted interests bitmap\\n     * @param encryptedInterests 8-bit encrypted bitmap representing user's interests\\n     */\\n    function submitProfile(InEuint8 calldata encryptedInterests) external {\\n        require(!profiles[msg.sender].exists, \\\"Profile already exists\\\");\\n\\n        euint8 interests = FHE.asEuint8(encryptedInterests);\\n        FHE.allowThis(interests); // Grant access to this contract\\n\\n        profiles[msg.sender] = UserProfile({\\n            exists: true,\\n            interestsBitmap: interests,\\n            matches: new address[](0),\\n            profileCreatedAt: block.timestamp\\n        });\\n\\n        allUsers.push(msg.sender);\\n        emit ProfileCreated(msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Calculate similarity between two users using encrypted bitwise operations\\n     * @param targetUser Address of the user to compare with\\n     * @return requestId The ID of the match request\\n     */\\n    function calculateSimilarity(\\n        address targetUser\\n    ) external onlyRegisteredUser userExists(targetUser) returns (bytes32 requestId) {\\n        require(targetUser != msg.sender, \\\"Cannot match with yourself\\\");\\n        require(!isAlreadyMatched(msg.sender, targetUser), \\\"Users already matched\\\");\\n\\n        return _calculateSimilarity(msg.sender, targetUser);\\n    }\\n\\n    function _calculateSimilarity(address requester, address targetUser) internal returns (bytes32 requestId) {\\n        // Get both users' interest bitmaps\\n        euint8 myInterests = profiles[requester].interestsBitmap;\\n        euint8 theirInterests = profiles[targetUser].interestsBitmap;\\n\\n        // Calculate common interests using bitwise AND\\n        euint8 commonInterestsBitmap = FHE.and(myInterests, theirInterests);\\n        FHE.allowThis(commonInterestsBitmap);\\n\\n        // Count the number of set bits (common interests) using efficient bit counting\\n        euint8 similarityScore = _countSetBits(commonInterestsBitmap);\\n        FHE.allowThis(similarityScore);\\n\\n        // Check if similarity meets threshold for matching\\n        euint8 threshold = FHE.asEuint8(MATCH_THRESHOLD);\\n        FHE.allowThis(threshold);\\n        ebool isMatchEncrypted = FHE.gte(similarityScore, threshold);\\n        FHE.allowThis(isMatchEncrypted);\\n\\n        // Generate request ID\\n        requestId = keccak256(abi.encodePacked(requester, targetUser, block.timestamp, block.number));\\n\\n        // Store the match request\\n        matchRequests[requestId] = MatchRequest({\\n            requester: requester,\\n            target: targetUser,\\n            similarityScore: similarityScore,\\n            scoreDecrypted: false,\\n            decryptedScore: 0,\\n            processed: true,\\n            timestamp: block.timestamp,\\n            isMatchEncrypted: isMatchEncrypted,\\n            matchDecrypted: false,\\n            isMatch: false\\n        });\\n\\n        emit SimilarityCalculated(requester, targetUser, requestId);\\n        return requestId;\\n    }\\n\\n    /**\\n     * @dev Count set bits in an 8-bit encrypted integer using efficient FHE operations\\n     * Much more gas-efficient than the 32-bit version\\n     */\\n    function _countSetBits(euint8 value) internal returns (euint8) {\\n        euint8 count = FHE.asEuint8(0);\\n        euint8 temp = value;\\n        FHE.allowThis(count);\\n        FHE.allowThis(temp);\\n\\n        // Check each bit position (only 8 iterations now!)\\n        for (uint8 i = 0; i < 8; i++) {\\n            euint8 bitMask = FHE.asEuint8(1 << i);\\n            euint8 bitValue = FHE.and(temp, bitMask);\\n\\n            // Check if bit is set (non-zero)\\n            ebool bitIsSet = FHE.gt(bitValue, FHE.asEuint8(0));\\n            euint8 addValue = FHE.select(bitIsSet, FHE.asEuint8(1), FHE.asEuint8(0));\\n            count = FHE.add(count, addValue);\\n            FHE.allowThis(count);\\n        }\\n\\n        return count;\\n    }\\n\\n    /**\\n     * @dev Request decryption of match result (whether users match)\\n     * @param requestId The ID of the match request\\n     */\\n    function requestMatchDecryption(bytes32 requestId) external {\\n        MatchRequest storage request = matchRequests[requestId];\\n        require(request.processed, \\\"Match calculation not found\\\");\\n        require(!request.matchDecrypted, \\\"Match already decrypted\\\");\\n        require(msg.sender == request.requester || msg.sender == request.target, \\\"Only involved parties can decrypt\\\");\\n\\n        // Request decryption using FHENIX's built-in decryption\\n        FHE.decrypt(request.isMatchEncrypted);\\n\\n        emit MatchDecryptionRequested(requestId);\\n    }\\n\\n    /**\\n     * @dev Request decryption of similarity score\\n     * @param requestId The ID of the match request\\n     */\\n    function requestScoreDecryption(bytes32 requestId) external {\\n        MatchRequest storage request = matchRequests[requestId];\\n        require(request.processed, \\\"Match calculation not found\\\");\\n        require(!request.scoreDecrypted, \\\"Score already decrypted\\\");\\n        require(msg.sender == request.requester || msg.sender == request.target, \\\"Only involved parties can decrypt\\\");\\n\\n        // Request decryption of similarity score\\n        FHE.decrypt(request.similarityScore);\\n\\n        emit ScoreDecryptionRequested(requestId);\\n    }\\n\\n    /**\\n     * @dev Retrieve and process decrypted match result\\n     * @param requestId The ID of the match request\\n     */\\n    function processMatchDecryption(bytes32 requestId) external {\\n        MatchRequest storage request = matchRequests[requestId];\\n        require(request.processed, \\\"Match calculation not found\\\");\\n        require(!request.matchDecrypted, \\\"Match already processed\\\");\\n\\n        // Get decrypted result safely\\n        (bool isMatch, bool ready) = FHE.getDecryptResultSafe(request.isMatchEncrypted);\\n        require(ready, \\\"Decryption not ready yet\\\");\\n\\n        request.isMatch = isMatch;\\n        request.matchDecrypted = true;\\n\\n        if (isMatch) {\\n            // Add both users to each other's matches\\n            profiles[request.requester].matches.push(request.target);\\n            profiles[request.target].matches.push(request.requester);\\n\\n            emit MatchFound(request.requester, request.target, block.timestamp);\\n        }\\n\\n        emit MatchDecrypted(requestId, isMatch);\\n    }\\n\\n    /**\\n     * @dev Retrieve and process decrypted similarity score\\n     * @param requestId The ID of the match request\\n     */\\n    function processScoreDecryption(bytes32 requestId) external {\\n        MatchRequest storage request = matchRequests[requestId];\\n        require(request.processed, \\\"Match calculation not found\\\");\\n        require(!request.scoreDecrypted, \\\"Score already processed\\\");\\n\\n        // Get decrypted result safely\\n        (uint8 score, bool ready) = FHE.getDecryptResultSafe(request.similarityScore);\\n        require(ready, \\\"Decryption not ready yet\\\");\\n\\n        request.decryptedScore = score;\\n        request.scoreDecrypted = true;\\n\\n        emit ScoreDecrypted(requestId, score);\\n    }\\n\\n    /**\\n     * @dev Check if two users are already matched\\n     * @param user1 First user address\\n     * @param user2 Second user address\\n     * @return True if users are already matched\\n     */\\n    function isAlreadyMatched(address user1, address user2) public view returns (bool) {\\n        address[] memory user1Matches = profiles[user1].matches;\\n        for (uint256 i = 0; i < user1Matches.length; i++) {\\n            if (user1Matches[i] == user2) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Get user's matches (only callable by the user themselves)\\n     * @return Array of addresses that matched with the caller\\n     */\\n    function getMyMatches() external view onlyRegisteredUser returns (address[] memory) {\\n        return profiles[msg.sender].matches;\\n    }\\n\\n    /**\\n     * @dev Get match count for a user\\n     * @param user Address to check\\n     * @return Number of matches\\n     */\\n    function getMatchCount(address user) external view userExists(user) returns (uint256) {\\n        return profiles[user].matches.length;\\n    }\\n\\n    /**\\n     * @dev Get total number of registered users\\n     * @return Total user count\\n     */\\n    function getTotalUsers() external view returns (uint256) {\\n        return allUsers.length;\\n    }\\n\\n    /**\\n     * @dev Get all registered users\\n     * @return Array of all user addresses\\n     */\\n    function getAllUsers() external view returns (address[] memory) {\\n        return allUsers;\\n    }\\n\\n    /**\\n     * @dev Check if a user has a profile\\n     * @param user Address to check\\n     * @return True if user has a profile\\n     */\\n    function hasProfile(address user) external view returns (bool) {\\n        return profiles[user].exists;\\n    }\\n\\n    /**\\n     * @dev Get match request details\\n     * @param requestId The request ID\\n     * @return requester The address of the requester\\n     * @return target The address of the target\\n     * @return processed Whether the match request has been processed\\n     * @return timestamp The timestamp of the match request\\n     * @return scoreDecrypted Whether the similarity score has been decrypted\\n     * @return decryptedScore The decrypted similarity score\\n     * @return matchDecrypted Whether the match result has been decrypted\\n     * @return isMatch Whether the match result is true\\n     */\\n    function getMatchRequest(\\n        bytes32 requestId\\n    )\\n        external\\n        view\\n        returns (\\n            address requester,\\n            address target,\\n            bool processed,\\n            uint256 timestamp,\\n            bool scoreDecrypted,\\n            uint8 decryptedScore,\\n            bool matchDecrypted,\\n            bool isMatch\\n        )\\n    {\\n        MatchRequest memory request = matchRequests[requestId];\\n        return (\\n            request.requester,\\n            request.target,\\n            request.processed,\\n            request.timestamp,\\n            request.scoreDecrypted,\\n            request.decryptedScore,\\n            request.matchDecrypted,\\n            request.isMatch\\n        );\\n    }\\n\\n    /**\\n     * @dev Batch similarity calculation for multiple users\\n     * @param targets Array of user addresses to calculate similarity with\\n     * @return requestIds Array of match request IDs for each target\\n     */\\n    function batchCalculateSimilarity(\\n        address[] calldata targets\\n    ) external onlyRegisteredUser returns (bytes32[] memory requestIds) {\\n        require(targets.length > 0, \\\"No targets provided\\\");\\n        require(targets.length <= 10, \\\"Too many targets\\\"); // Gas limit protection\\n\\n        requestIds = new bytes32[](targets.length);\\n\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            require(profiles[targets[i]].exists, \\\"Target user does not exist\\\");\\n            require(targets[i] != msg.sender, \\\"Cannot match with yourself\\\");\\n            require(!isAlreadyMatched(msg.sender, targets[i]), \\\"Already matched with this user\\\");\\n\\n            requestIds[i] = _calculateSimilarity(msg.sender, targets[i]);\\n        }\\n\\n        return requestIds;\\n    }\\n\\n    /**\\n     * @dev Emergency function to remove a user's profile\\n     */\\n    function deleteProfile() external onlyRegisteredUser {\\n        delete profiles[msg.sender];\\n\\n        // Remove from allUsers array\\n        for (uint256 i = 0; i < allUsers.length; i++) {\\n            if (allUsers[i] == msg.sender) {\\n                allUsers[i] = allUsers[allUsers.length - 1];\\n                allUsers.pop();\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ee16a827aebbc34e9076a287d5f227891749a76cc1cad5baaca182ecaadb7f5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600e575f80fd5b506123d38061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610132575f3560e01c806398428da1116100b4578063a787c80b11610079578063a787c80b14610437578063b8841fc114610462578063bbe1562714610475578063d2159042146104c4578063e2842d79146104e4578063fbe71597146104ec575f80fd5b806398428da1146103bb5780639be572f6146103de5780639feb541a146103e6578063a2bdedf4146103f9578063a6456c8714610424575f80fd5b80635cfe8705116100fa5780635cfe87051461036d5780636d4540eb146103755780638492f2be1461037d5780638500fcbc146103925780638ee5781c146103b3575f80fd5b806306dbf6421461013657806313998f1c1461014b5780631a12383c1461022457806334f60cf91461023e57806343c1e2a51461035a575b5f80fd5b610149610144366004611e43565b6104ff565b005b6101c2610159366004611e43565b600160208190525f918252604090912080549181015460028201546003830154600484015460058501546006909501546001600160a01b039687169690941694929360ff808416946101008086048316956201000090048316949391928083169291909104168a565b604080516001600160a01b039b8c1681529a90991660208b015297890196909652931515606088015260ff9092166080870152151560a086015260c085015260e084015215156101008301521515610120820152610140015b60405180910390f35b61022c600881565b60405160ff909116815260200161021b565b61030761024c366004611e43565b5f9081526001602081815260409283902083516101408101855281546001600160a01b039081168083529483015416928101839052600282015494810194909452600381015460ff808216151560608701819052610100808404831660808901819052620100009094048316151560a08901819052600486015460c08a01819052600587015460e08b01526006909601548085161515838b018190529290049093161515610120909801889052959794969195939490939190565b604080516001600160a01b03998a1681529890971660208901529415159587019590955260608601929092521515608085015260ff1660a084015290151560c0830152151560e08201526101000161021b565b610149610368366004611e43565b61060f565b61022c600381565b61014961075e565b6103856108b7565b60405161021b9190611e5a565b6103a56103a0366004611ec1565b61094f565b60405190815260200161021b565b61022c600481565b6103ce6103c9366004611eda565b6109a7565b604051901515815260200161021b565b6002546103a5565b6103a56103f4366004611ec1565b610a6f565b61040c610407366004611e43565b610b8e565b6040516001600160a01b03909116815260200161021b565b610149610432366004611f0b565b610bb6565b6103ce610445366004611ec1565b6001600160a01b03165f9081526020819052604090205460ff1690565b610149610470366004611e43565b610d1b565b6104a7610483366004611ec1565b5f6020819052908152604090208054600182015460039092015460ff909116919083565b60408051931515845260208401929092529082015260600161021b565b6104d76104d2366004611f42565b610f1a565b60405161021b9190611fb1565b6103856111d4565b6101496104fa366004611e43565b611232565b5f818152600160205260409020600381015462010000900460ff1661053f5760405162461bcd60e51b815260040161053690611fe8565b60405180910390fd5b600381015460ff16156105945760405162461bcd60e51b815260206004820152601760248201527f53636f726520616c7265616479206465637279707465640000000000000000006044820152606401610536565b80546001600160a01b03163314806105b8575060018101546001600160a01b031633145b6105d45760405162461bcd60e51b81526004016105369061201f565b6105e18160020154611339565b60405182907f3fa9ab616f5f12c1befe19835cf19a8d4ed5d15a78df297e21fe13c1c27f29bf905f90a25050565b5f818152600160205260409020600381015462010000900460ff166106465760405162461bcd60e51b815260040161053690611fe8565b600381015460ff161561069b5760405162461bcd60e51b815260206004820152601760248201527f53636f726520616c72656164792070726f6365737365640000000000000000006044820152606401610536565b5f806106aa836002015461135f565b91509150806106f65760405162461bcd60e51b8152602060048201526018602482015277111958dc9e5c1d1a5bdb881b9bdd081c9958591e481e595d60421b6044820152606401610536565b60038301805460ff1960ff8516610100021661ffff1990911617600117905560405184907f05d1a9ee28ca0f434850327d8e6d3b68d44df33ae2b6c3b261fc46530a4e9f6e9061075090859060ff91909116815260200190565b60405180910390a250505050565b335f9081526020819052604090205460ff1661078c5760405162461bcd60e51b815260040161053690612060565b335f908152602081905260408120805460ff1916815560018101829055906107b76002830182611db1565b600382015f905550505f5b6002548110156108b457336001600160a01b0316600282815481106107e9576107e961208d565b5f918252602090912001546001600160a01b0316036108ac5760028054610812906001906120a1565b815481106108225761082261208d565b5f91825260209091200154600280546001600160a01b03909216918390811061084d5761084d61208d565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055506002805480610889576108896120c0565b5f8281526020902081015f1990810180546001600160a01b031916905501905550565b6001016107c2565b50565b335f9081526020819052604090205460609060ff166108e85760405162461bcd60e51b815260040161053690612060565b335f90815260208181526040918290206002018054835181840281018401909452808452909183018282801561094557602002820191905f5260205f20905b81546001600160a01b03168152600190910190602001808311610927575b5050505050905090565b6001600160a01b0381165f90815260208190526040812054829060ff166109885760405162461bcd60e51b8152600401610536906120d4565b50506001600160a01b03165f9081526020819052604090206002015490565b6001600160a01b0382165f9081526020818152604080832060020180548251818502810185019093528083528493830182828015610a0c57602002820191905f5260205f20905b81546001600160a01b031681526001909101906020018083116109ee575b505050505090505f5b8151811015610a6357836001600160a01b0316828281518110610a3a57610a3a61208d565b60200260200101516001600160a01b031603610a5b57600192505050610a69565b600101610a15565b505f9150505b92915050565b335f9081526020819052604081205460ff16610a9d5760405162461bcd60e51b815260040161053690612060565b6001600160a01b0382165f90815260208190526040902054829060ff16610ad65760405162461bcd60e51b8152600401610536906120d4565b336001600160a01b03841603610b2e5760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f74206d61746368207769746820796f757273656c660000000000006044820152606401610536565b610b3833846109a7565b15610b7d5760405162461bcd60e51b8152602060048201526015602482015274155cd95c9cc8185b1c9958591e481b585d18da1959605a1b6044820152606401610536565b610b873384611378565b9392505050565b60028181548110610b9d575f80fd5b5f918252602090912001546001600160a01b0316905081565b335f9081526020819052604090205460ff1615610c0e5760405162461bcd60e51b815260206004820152601660248201527550726f66696c6520616c72656164792065786973747360501b6044820152606401610536565b5f610c20610c1b83612189565b61162e565b9050610c2b816116c3565b604080516080810182526001808252602080830185815284515f8082528184018752858701918252426060870152338152808452959095208451815460ff19169015151781559051928101929092559251805192939192610c929260028501920190611dcc565b5060609190910151600390910155600280546001810182555f919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b031916339081179091556040514281527fcb939889322fed25104a5d8945bde5162563412a1fd718946cdcacb03088ea089060200160405180910390a25050565b5f818152600160205260409020600381015462010000900460ff16610d525760405162461bcd60e51b815260040161053690611fe8565b600681015460ff1615610da75760405162461bcd60e51b815260206004820152601760248201527f4d6174636820616c72656164792070726f6365737365640000000000000000006044820152606401610536565b5f80610db6836005015461172c565b9150915080610e025760405162461bcd60e51b8152602060048201526018602482015277111958dc9e5c1d1a5bdb881b9bdd081c9958591e481e595d60421b6044820152606401610536565b60068301805460ff1984158015610100029190911661ffff1990921691909117600117909155610ee65782546001600160a01b039081165f90815260208181526040808320600180890180546002938401805480850182559088528688200180546001600160a01b0319908116928a169290921790558154881687528487208b54940180549384018155875294909520018054909316908516179091559054855491519083169291909116907f86c22c953a48509cdeb83e18f0f18677e146d22bacb2c35bf34e0c650ca509c190610edd9042815260200190565b60405180910390a35b837f8f99d97fa9f2b506e9cb956e2a3d7c8295478a760747cf0c46809a44702a94ba83604051610750911515815260200190565b335f9081526020819052604090205460609060ff16610f4b5760405162461bcd60e51b815260040161053690612060565b81610f8e5760405162461bcd60e51b8152602060048201526013602482015272139bc81d185c99d95d1cc81c1c9bdd9a591959606a1b6044820152606401610536565b600a821115610fd25760405162461bcd60e51b815260206004820152601060248201526f546f6f206d616e79207461726765747360801b6044820152606401610536565b8167ffffffffffffffff811115610feb57610feb61210b565b604051908082528060200260200182016040528015611014578160200160208202803683370190505b5090505f5b828110156111cd575f808585848181106110355761103561208d565b905060200201602081019061104a9190611ec1565b6001600160a01b0316815260208101919091526040015f205460ff166110825760405162461bcd60e51b8152600401610536906120d4565b338484838181106110955761109561208d565b90506020020160208101906110aa9190611ec1565b6001600160a01b0316036111005760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f74206d61746368207769746820796f757273656c660000000000006044820152606401610536565b61112b338585848181106111165761111661208d565b90506020020160208101906103c99190611ec1565b156111785760405162461bcd60e51b815260206004820152601e60248201527f416c7265616479206d61746368656420776974682074686973207573657200006044820152606401610536565b6111a83385858481811061118e5761118e61208d565b90506020020160208101906111a39190611ec1565b611378565b8282815181106111ba576111ba61208d565b6020908102919091010152600101611019565b5092915050565b6060600280548060200260200160405190810160405280929190818152602001828054801561094557602002820191905f5260205f209081546001600160a01b03168152600190910190602001808311610927575050505050905090565b5f818152600160205260409020600381015462010000900460ff166112695760405162461bcd60e51b815260040161053690611fe8565b600681015460ff16156112be5760405162461bcd60e51b815260206004820152601760248201527f4d6174636820616c7265616479206465637279707465640000000000000000006044820152606401610536565b80546001600160a01b03163314806112e2575060018101546001600160a01b031633145b6112fe5760405162461bcd60e51b81526004016105369061201f565b61130b8160050154611747565b60405182907fa58e9fa81cac562e7cc8838a86fd5e1b09882ac5ea8275f7f205eca55902aaa9905f90a25050565b6113428161175d565b6113525761134f5f611766565b90505b61135b81611771565b5050565b5f805f8061136c856117df565b90969095509350505050565b6001600160a01b038083165f9081526020819052604080822060019081015493851683529082200154909190826113af838361185d565b90506113ba816116c3565b5f6113c48261189e565b90506113cf816116c3565b5f6113da6003611766565b90506113e5816116c3565b5f6113f0838361194d565b90506113fb816116c3565b6040516bffffffffffffffffffffffff1960608b811b821660208401528a901b1660348201524260488201524360688201526088016040516020818303038152906040528051906020012096506040518061014001604052808a6001600160a01b03168152602001896001600160a01b031681526020018481526020015f151581526020015f60ff1681526020016001151581526020014281526020018281526020015f151581526020015f151581525060015f8981526020019081526020015f205f820151815f015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003015f6101000a81548160ff02191690831515021790555060808201518160030160016101000a81548160ff021916908360ff16021790555060a08201518160030160026101000a81548160ff02191690831515021790555060c0820151816004015560e08201518160050155610100820151816006015f6101000a81548160ff0219169083151502179055506101208201518160060160016101000a81548160ff021916908315150217905550905050876001600160a01b0316896001600160a01b03167f3c10d57a026835984fe3a5bbd08df6f1cba6d2470d6a44aa2f4a7dcf33f931338960405161161a91815260200190565b60405180910390a350505050505092915050565b60408101515f9060029060ff16811461166d5760408084015190516367cf307160e01b815260ff91821660048201529082166024820152604401610536565b60408051608080820183525f808352602080840182905283850191909152606092830183905283519182018452865182528087015160ff16908201526002928101929092528085015190820152610b879061198e565b604051631974142760e21b81526004810182905230602482015273ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d9906365d0509c906044015f604051808303815f87803b158015611713575f80fd5b505af1158015611725573d5f803e3d5ffd5b5050505050565b5f805f80611739856117df565b901515969095509350505050565b6117508161175d565b6113525761134f5f611a09565b5f811515610a69565b5f610a69825f611a14565b604051630828982760e01b8152600481018290523360248201525f9073ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d9906308289827906044015f604051808303815f87803b1580156117c3575f80fd5b505af11580156117d5573d5f803e3d5ffd5b5093949350505050565b60405163458693c960e01b8152600481018290525f90819073ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d99063458693c9906024016040805180830381865afa158015611830573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611854919061224b565b91509150915091565b5f6118678361175d565b611877576118745f611766565b92505b6118808261175d565b6118905761188d5f611766565b91505b610b8760028484600a611a2a565b5f806118a95f611766565b9050826118b5826116c3565b6118be816116c3565b5f5b60088160ff161015611944575f6118dc600160ff84161b611766565b90505f6118e9848361185d565b90505f6118fe826118f95f611766565b611acb565b90505f61191d8261190f6001611766565b6119185f611766565b611b0c565b90506119298782611b65565b9650611934876116c3565b5050600190920191506118c09050565b50909392505050565b5f6119578361175d565b611967576119645f611766565b92505b6119708261175d565b6119805761197d5f611766565b91505b610b87600284846012611a2a565b6040516313fce3b160e11b81525f9073ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d9906327f9c762906119c9908590339060040161227d565b6020604051808303815f875af11580156119e5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a6991906122f2565b5f610a69825f611ba6565b5f80611a2284600285611bba565b949350505050565b5f73ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d9631888debd8684611a518888611c5f565b604080515f815260208101918290526001600160e01b031960e087901b16909152611a829392919060248101612343565b6020604051808303815f875af1158015611a9e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ac291906122f2565b95945050505050565b5f611ad58361175d565b611ae557611ae25f611766565b92505b611aee8261175d565b611afe57611afb5f611766565b91505b610b87600284846015611a2a565b5f611b168461175d565b611b2657611b235f611a09565b93505b611b2f8361175d565b611b3f57611b3c5f611766565b92505b611b488261175d565b611b5857611b555f611766565b91505b611a226002858585611cc8565b5f611b6f8361175d565b611b7f57611b7c5f611766565b92505b611b888261175d565b611b9857611b955f611766565b91505b610b87600284846008611a2a565b5f808315611bb2575060015b5f611ac2825f865b604080515f8082526020820190925273ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d990631888debd908590601a90611c00898960ff16611bfb8a611cf1565b611d26565b6040518563ffffffff1660e01b8152600401611c1f9493929190612343565b6020604051808303815f875af1158015611c3b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a2291906122f2565b60408051600280825260608083018452925f92919060208301908036833701905050905083815f81518110611c9657611c9661208d565b6020026020010181815250508281600181518110611cb657611cb661208d565b60209081029190910101529392505050565b5f73ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d9631888debd866004611a51888888611d26565b5f808260030b1215611d1c576040516311ead17f60e31b8152600383900b6004820152602401610536565b5063ffffffff1690565b604080516003808252608082019092526060915f919060208201848036833701905050905084815f81518110611d5e57611d5e61208d565b6020026020010181815250508381600181518110611d7e57611d7e61208d565b6020026020010181815250508281600281518110611d9e57611d9e61208d565b6020908102919091010152949350505050565b5080545f8255905f5260205f20908101906108b49190611e2f565b828054828255905f5260205f20908101928215611e1f579160200282015b82811115611e1f57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611dea565b50611e2b929150611e2f565b5090565b5b80821115611e2b575f8155600101611e30565b5f60208284031215611e53575f80fd5b5035919050565b602080825282518282018190525f9190848201906040850190845b81811015611e9a5783516001600160a01b031683529284019291840191600101611e75565b50909695505050505050565b80356001600160a01b0381168114611ebc575f80fd5b919050565b5f60208284031215611ed1575f80fd5b610b8782611ea6565b5f8060408385031215611eeb575f80fd5b611ef483611ea6565b9150611f0260208401611ea6565b90509250929050565b5f60208284031215611f1b575f80fd5b813567ffffffffffffffff811115611f31575f80fd5b820160808185031215610b87575f80fd5b5f8060208385031215611f53575f80fd5b823567ffffffffffffffff80821115611f6a575f80fd5b818501915085601f830112611f7d575f80fd5b813581811115611f8b575f80fd5b8660208260051b8501011115611f9f575f80fd5b60209290920196919550909350505050565b602080825282518282018190525f9190848201906040850190845b81811015611e9a57835183529284019291840191600101611fcc565b6020808252601b908201527f4d617463682063616c63756c6174696f6e206e6f7420666f756e640000000000604082015260600190565b60208082526021908201527f4f6e6c7920696e766f6c76656420706172746965732063616e206465637279706040820152601d60fa1b606082015260800190565b602080825260139082015272155cd95c881b9bdd081c9959da5cdd195c9959606a1b604082015260600190565b634e487b7160e01b5f52603260045260245ffd5b81810381811115610a6957634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52603160045260245ffd5b6020808252601a908201527f546172676574207573657220646f6573206e6f74206578697374000000000000604082015260600190565b634e487b7160e01b5f52604160045260245ffd5b6040516080810167ffffffffffffffff811182821017156121425761214261210b565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156121715761217161210b565b604052919050565b803560ff81168114611ebc575f80fd5b5f60808236031215612199575f80fd5b6121a161211f565b8235815260206121b2818501612179565b818301526121c260408501612179565b6040830152606084013567ffffffffffffffff808211156121e1575f80fd5b9085019036601f8301126121f3575f80fd5b8135818111156122055761220561210b565b612217601f8201601f19168501612148565b9150808252368482850101111561222c575f80fd5b80848401858401375f9082019093019290925250606082015292915050565b5f806040838503121561225c575f80fd5b8251915060208301518015158114612272575f80fd5b809150509250929050565b604081528251604082015260ff602084015116606082015260ff60408401511660808201525f6060840151608060a084015280518060c0850152806020830160e086015e5f60e08286018101919091526001600160a01b03959095166020850152601f01601f19169092019092019392505050565b5f60208284031215612302575f80fd5b5051919050565b5f815180845260208085019450602084015f5b838110156123385781518752958201959082019060010161231c565b509495945050505050565b60ff851681525f6020851061236657634e487b7160e01b5f52602160045260245ffd5b846020830152608060408301526123806080830185612309565b82810360608401526123928185612309565b97965050505050505056fea26469706673582212200425ca1d8fa7d9c6b282e13f2220a71b55fb837861cfb6fce9e47db2d33213ba64736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b5060043610610132575f3560e01c806398428da1116100b4578063a787c80b11610079578063a787c80b14610437578063b8841fc114610462578063bbe1562714610475578063d2159042146104c4578063e2842d79146104e4578063fbe71597146104ec575f80fd5b806398428da1146103bb5780639be572f6146103de5780639feb541a146103e6578063a2bdedf4146103f9578063a6456c8714610424575f80fd5b80635cfe8705116100fa5780635cfe87051461036d5780636d4540eb146103755780638492f2be1461037d5780638500fcbc146103925780638ee5781c146103b3575f80fd5b806306dbf6421461013657806313998f1c1461014b5780631a12383c1461022457806334f60cf91461023e57806343c1e2a51461035a575b5f80fd5b610149610144366004611e43565b6104ff565b005b6101c2610159366004611e43565b600160208190525f918252604090912080549181015460028201546003830154600484015460058501546006909501546001600160a01b039687169690941694929360ff808416946101008086048316956201000090048316949391928083169291909104168a565b604080516001600160a01b039b8c1681529a90991660208b015297890196909652931515606088015260ff9092166080870152151560a086015260c085015260e084015215156101008301521515610120820152610140015b60405180910390f35b61022c600881565b60405160ff909116815260200161021b565b61030761024c366004611e43565b5f9081526001602081815260409283902083516101408101855281546001600160a01b039081168083529483015416928101839052600282015494810194909452600381015460ff808216151560608701819052610100808404831660808901819052620100009094048316151560a08901819052600486015460c08a01819052600587015460e08b01526006909601548085161515838b018190529290049093161515610120909801889052959794969195939490939190565b604080516001600160a01b03998a1681529890971660208901529415159587019590955260608601929092521515608085015260ff1660a084015290151560c0830152151560e08201526101000161021b565b610149610368366004611e43565b61060f565b61022c600381565b61014961075e565b6103856108b7565b60405161021b9190611e5a565b6103a56103a0366004611ec1565b61094f565b60405190815260200161021b565b61022c600481565b6103ce6103c9366004611eda565b6109a7565b604051901515815260200161021b565b6002546103a5565b6103a56103f4366004611ec1565b610a6f565b61040c610407366004611e43565b610b8e565b6040516001600160a01b03909116815260200161021b565b610149610432366004611f0b565b610bb6565b6103ce610445366004611ec1565b6001600160a01b03165f9081526020819052604090205460ff1690565b610149610470366004611e43565b610d1b565b6104a7610483366004611ec1565b5f6020819052908152604090208054600182015460039092015460ff909116919083565b60408051931515845260208401929092529082015260600161021b565b6104d76104d2366004611f42565b610f1a565b60405161021b9190611fb1565b6103856111d4565b6101496104fa366004611e43565b611232565b5f818152600160205260409020600381015462010000900460ff1661053f5760405162461bcd60e51b815260040161053690611fe8565b60405180910390fd5b600381015460ff16156105945760405162461bcd60e51b815260206004820152601760248201527f53636f726520616c7265616479206465637279707465640000000000000000006044820152606401610536565b80546001600160a01b03163314806105b8575060018101546001600160a01b031633145b6105d45760405162461bcd60e51b81526004016105369061201f565b6105e18160020154611339565b60405182907f3fa9ab616f5f12c1befe19835cf19a8d4ed5d15a78df297e21fe13c1c27f29bf905f90a25050565b5f818152600160205260409020600381015462010000900460ff166106465760405162461bcd60e51b815260040161053690611fe8565b600381015460ff161561069b5760405162461bcd60e51b815260206004820152601760248201527f53636f726520616c72656164792070726f6365737365640000000000000000006044820152606401610536565b5f806106aa836002015461135f565b91509150806106f65760405162461bcd60e51b8152602060048201526018602482015277111958dc9e5c1d1a5bdb881b9bdd081c9958591e481e595d60421b6044820152606401610536565b60038301805460ff1960ff8516610100021661ffff1990911617600117905560405184907f05d1a9ee28ca0f434850327d8e6d3b68d44df33ae2b6c3b261fc46530a4e9f6e9061075090859060ff91909116815260200190565b60405180910390a250505050565b335f9081526020819052604090205460ff1661078c5760405162461bcd60e51b815260040161053690612060565b335f908152602081905260408120805460ff1916815560018101829055906107b76002830182611db1565b600382015f905550505f5b6002548110156108b457336001600160a01b0316600282815481106107e9576107e961208d565b5f918252602090912001546001600160a01b0316036108ac5760028054610812906001906120a1565b815481106108225761082261208d565b5f91825260209091200154600280546001600160a01b03909216918390811061084d5761084d61208d565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055506002805480610889576108896120c0565b5f8281526020902081015f1990810180546001600160a01b031916905501905550565b6001016107c2565b50565b335f9081526020819052604090205460609060ff166108e85760405162461bcd60e51b815260040161053690612060565b335f90815260208181526040918290206002018054835181840281018401909452808452909183018282801561094557602002820191905f5260205f20905b81546001600160a01b03168152600190910190602001808311610927575b5050505050905090565b6001600160a01b0381165f90815260208190526040812054829060ff166109885760405162461bcd60e51b8152600401610536906120d4565b50506001600160a01b03165f9081526020819052604090206002015490565b6001600160a01b0382165f9081526020818152604080832060020180548251818502810185019093528083528493830182828015610a0c57602002820191905f5260205f20905b81546001600160a01b031681526001909101906020018083116109ee575b505050505090505f5b8151811015610a6357836001600160a01b0316828281518110610a3a57610a3a61208d565b60200260200101516001600160a01b031603610a5b57600192505050610a69565b600101610a15565b505f9150505b92915050565b335f9081526020819052604081205460ff16610a9d5760405162461bcd60e51b815260040161053690612060565b6001600160a01b0382165f90815260208190526040902054829060ff16610ad65760405162461bcd60e51b8152600401610536906120d4565b336001600160a01b03841603610b2e5760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f74206d61746368207769746820796f757273656c660000000000006044820152606401610536565b610b3833846109a7565b15610b7d5760405162461bcd60e51b8152602060048201526015602482015274155cd95c9cc8185b1c9958591e481b585d18da1959605a1b6044820152606401610536565b610b873384611378565b9392505050565b60028181548110610b9d575f80fd5b5f918252602090912001546001600160a01b0316905081565b335f9081526020819052604090205460ff1615610c0e5760405162461bcd60e51b815260206004820152601660248201527550726f66696c6520616c72656164792065786973747360501b6044820152606401610536565b5f610c20610c1b83612189565b61162e565b9050610c2b816116c3565b604080516080810182526001808252602080830185815284515f8082528184018752858701918252426060870152338152808452959095208451815460ff19169015151781559051928101929092559251805192939192610c929260028501920190611dcc565b5060609190910151600390910155600280546001810182555f919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b031916339081179091556040514281527fcb939889322fed25104a5d8945bde5162563412a1fd718946cdcacb03088ea089060200160405180910390a25050565b5f818152600160205260409020600381015462010000900460ff16610d525760405162461bcd60e51b815260040161053690611fe8565b600681015460ff1615610da75760405162461bcd60e51b815260206004820152601760248201527f4d6174636820616c72656164792070726f6365737365640000000000000000006044820152606401610536565b5f80610db6836005015461172c565b9150915080610e025760405162461bcd60e51b8152602060048201526018602482015277111958dc9e5c1d1a5bdb881b9bdd081c9958591e481e595d60421b6044820152606401610536565b60068301805460ff1984158015610100029190911661ffff1990921691909117600117909155610ee65782546001600160a01b039081165f90815260208181526040808320600180890180546002938401805480850182559088528688200180546001600160a01b0319908116928a169290921790558154881687528487208b54940180549384018155875294909520018054909316908516179091559054855491519083169291909116907f86c22c953a48509cdeb83e18f0f18677e146d22bacb2c35bf34e0c650ca509c190610edd9042815260200190565b60405180910390a35b837f8f99d97fa9f2b506e9cb956e2a3d7c8295478a760747cf0c46809a44702a94ba83604051610750911515815260200190565b335f9081526020819052604090205460609060ff16610f4b5760405162461bcd60e51b815260040161053690612060565b81610f8e5760405162461bcd60e51b8152602060048201526013602482015272139bc81d185c99d95d1cc81c1c9bdd9a591959606a1b6044820152606401610536565b600a821115610fd25760405162461bcd60e51b815260206004820152601060248201526f546f6f206d616e79207461726765747360801b6044820152606401610536565b8167ffffffffffffffff811115610feb57610feb61210b565b604051908082528060200260200182016040528015611014578160200160208202803683370190505b5090505f5b828110156111cd575f808585848181106110355761103561208d565b905060200201602081019061104a9190611ec1565b6001600160a01b0316815260208101919091526040015f205460ff166110825760405162461bcd60e51b8152600401610536906120d4565b338484838181106110955761109561208d565b90506020020160208101906110aa9190611ec1565b6001600160a01b0316036111005760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f74206d61746368207769746820796f757273656c660000000000006044820152606401610536565b61112b338585848181106111165761111661208d565b90506020020160208101906103c99190611ec1565b156111785760405162461bcd60e51b815260206004820152601e60248201527f416c7265616479206d61746368656420776974682074686973207573657200006044820152606401610536565b6111a83385858481811061118e5761118e61208d565b90506020020160208101906111a39190611ec1565b611378565b8282815181106111ba576111ba61208d565b6020908102919091010152600101611019565b5092915050565b6060600280548060200260200160405190810160405280929190818152602001828054801561094557602002820191905f5260205f209081546001600160a01b03168152600190910190602001808311610927575050505050905090565b5f818152600160205260409020600381015462010000900460ff166112695760405162461bcd60e51b815260040161053690611fe8565b600681015460ff16156112be5760405162461bcd60e51b815260206004820152601760248201527f4d6174636820616c7265616479206465637279707465640000000000000000006044820152606401610536565b80546001600160a01b03163314806112e2575060018101546001600160a01b031633145b6112fe5760405162461bcd60e51b81526004016105369061201f565b61130b8160050154611747565b60405182907fa58e9fa81cac562e7cc8838a86fd5e1b09882ac5ea8275f7f205eca55902aaa9905f90a25050565b6113428161175d565b6113525761134f5f611766565b90505b61135b81611771565b5050565b5f805f8061136c856117df565b90969095509350505050565b6001600160a01b038083165f9081526020819052604080822060019081015493851683529082200154909190826113af838361185d565b90506113ba816116c3565b5f6113c48261189e565b90506113cf816116c3565b5f6113da6003611766565b90506113e5816116c3565b5f6113f0838361194d565b90506113fb816116c3565b6040516bffffffffffffffffffffffff1960608b811b821660208401528a901b1660348201524260488201524360688201526088016040516020818303038152906040528051906020012096506040518061014001604052808a6001600160a01b03168152602001896001600160a01b031681526020018481526020015f151581526020015f60ff1681526020016001151581526020014281526020018281526020015f151581526020015f151581525060015f8981526020019081526020015f205f820151815f015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003015f6101000a81548160ff02191690831515021790555060808201518160030160016101000a81548160ff021916908360ff16021790555060a08201518160030160026101000a81548160ff02191690831515021790555060c0820151816004015560e08201518160050155610100820151816006015f6101000a81548160ff0219169083151502179055506101208201518160060160016101000a81548160ff021916908315150217905550905050876001600160a01b0316896001600160a01b03167f3c10d57a026835984fe3a5bbd08df6f1cba6d2470d6a44aa2f4a7dcf33f931338960405161161a91815260200190565b60405180910390a350505050505092915050565b60408101515f9060029060ff16811461166d5760408084015190516367cf307160e01b815260ff91821660048201529082166024820152604401610536565b60408051608080820183525f808352602080840182905283850191909152606092830183905283519182018452865182528087015160ff16908201526002928101929092528085015190820152610b879061198e565b604051631974142760e21b81526004810182905230602482015273ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d9906365d0509c906044015f604051808303815f87803b158015611713575f80fd5b505af1158015611725573d5f803e3d5ffd5b5050505050565b5f805f80611739856117df565b901515969095509350505050565b6117508161175d565b6113525761134f5f611a09565b5f811515610a69565b5f610a69825f611a14565b604051630828982760e01b8152600481018290523360248201525f9073ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d9906308289827906044015f604051808303815f87803b1580156117c3575f80fd5b505af11580156117d5573d5f803e3d5ffd5b5093949350505050565b60405163458693c960e01b8152600481018290525f90819073ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d99063458693c9906024016040805180830381865afa158015611830573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611854919061224b565b91509150915091565b5f6118678361175d565b611877576118745f611766565b92505b6118808261175d565b6118905761188d5f611766565b91505b610b8760028484600a611a2a565b5f806118a95f611766565b9050826118b5826116c3565b6118be816116c3565b5f5b60088160ff161015611944575f6118dc600160ff84161b611766565b90505f6118e9848361185d565b90505f6118fe826118f95f611766565b611acb565b90505f61191d8261190f6001611766565b6119185f611766565b611b0c565b90506119298782611b65565b9650611934876116c3565b5050600190920191506118c09050565b50909392505050565b5f6119578361175d565b611967576119645f611766565b92505b6119708261175d565b6119805761197d5f611766565b91505b610b87600284846012611a2a565b6040516313fce3b160e11b81525f9073ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d9906327f9c762906119c9908590339060040161227d565b6020604051808303815f875af11580156119e5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a6991906122f2565b5f610a69825f611ba6565b5f80611a2284600285611bba565b949350505050565b5f73ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d9631888debd8684611a518888611c5f565b604080515f815260208101918290526001600160e01b031960e087901b16909152611a829392919060248101612343565b6020604051808303815f875af1158015611a9e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ac291906122f2565b95945050505050565b5f611ad58361175d565b611ae557611ae25f611766565b92505b611aee8261175d565b611afe57611afb5f611766565b91505b610b87600284846015611a2a565b5f611b168461175d565b611b2657611b235f611a09565b93505b611b2f8361175d565b611b3f57611b3c5f611766565b92505b611b488261175d565b611b5857611b555f611766565b91505b611a226002858585611cc8565b5f611b6f8361175d565b611b7f57611b7c5f611766565b92505b611b888261175d565b611b9857611b955f611766565b91505b610b87600284846008611a2a565b5f808315611bb2575060015b5f611ac2825f865b604080515f8082526020820190925273ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d990631888debd908590601a90611c00898960ff16611bfb8a611cf1565b611d26565b6040518563ffffffff1660e01b8152600401611c1f9493929190612343565b6020604051808303815f875af1158015611c3b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a2291906122f2565b60408051600280825260608083018452925f92919060208301908036833701905050905083815f81518110611c9657611c9661208d565b6020026020010181815250508281600181518110611cb657611cb661208d565b60209081029190910101529392505050565b5f73ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d9631888debd866004611a51888888611d26565b5f808260030b1215611d1c576040516311ead17f60e31b8152600383900b6004820152602401610536565b5063ffffffff1690565b604080516003808252608082019092526060915f919060208201848036833701905050905084815f81518110611d5e57611d5e61208d565b6020026020010181815250508381600181518110611d7e57611d7e61208d565b6020026020010181815250508281600281518110611d9e57611d9e61208d565b6020908102919091010152949350505050565b5080545f8255905f5260205f20908101906108b49190611e2f565b828054828255905f5260205f20908101928215611e1f579160200282015b82811115611e1f57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611dea565b50611e2b929150611e2f565b5090565b5b80821115611e2b575f8155600101611e30565b5f60208284031215611e53575f80fd5b5035919050565b602080825282518282018190525f9190848201906040850190845b81811015611e9a5783516001600160a01b031683529284019291840191600101611e75565b50909695505050505050565b80356001600160a01b0381168114611ebc575f80fd5b919050565b5f60208284031215611ed1575f80fd5b610b8782611ea6565b5f8060408385031215611eeb575f80fd5b611ef483611ea6565b9150611f0260208401611ea6565b90509250929050565b5f60208284031215611f1b575f80fd5b813567ffffffffffffffff811115611f31575f80fd5b820160808185031215610b87575f80fd5b5f8060208385031215611f53575f80fd5b823567ffffffffffffffff80821115611f6a575f80fd5b818501915085601f830112611f7d575f80fd5b813581811115611f8b575f80fd5b8660208260051b8501011115611f9f575f80fd5b60209290920196919550909350505050565b602080825282518282018190525f9190848201906040850190845b81811015611e9a57835183529284019291840191600101611fcc565b6020808252601b908201527f4d617463682063616c63756c6174696f6e206e6f7420666f756e640000000000604082015260600190565b60208082526021908201527f4f6e6c7920696e766f6c76656420706172746965732063616e206465637279706040820152601d60fa1b606082015260800190565b602080825260139082015272155cd95c881b9bdd081c9959da5cdd195c9959606a1b604082015260600190565b634e487b7160e01b5f52603260045260245ffd5b81810381811115610a6957634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52603160045260245ffd5b6020808252601a908201527f546172676574207573657220646f6573206e6f74206578697374000000000000604082015260600190565b634e487b7160e01b5f52604160045260245ffd5b6040516080810167ffffffffffffffff811182821017156121425761214261210b565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156121715761217161210b565b604052919050565b803560ff81168114611ebc575f80fd5b5f60808236031215612199575f80fd5b6121a161211f565b8235815260206121b2818501612179565b818301526121c260408501612179565b6040830152606084013567ffffffffffffffff808211156121e1575f80fd5b9085019036601f8301126121f3575f80fd5b8135818111156122055761220561210b565b612217601f8201601f19168501612148565b9150808252368482850101111561222c575f80fd5b80848401858401375f9082019093019290925250606082015292915050565b5f806040838503121561225c575f80fd5b8251915060208301518015158114612272575f80fd5b809150509250929050565b604081528251604082015260ff602084015116606082015260ff60408401511660808201525f6060840151608060a084015280518060c0850152806020830160e086015e5f60e08286018101919091526001600160a01b03959095166020850152601f01601f19169092019092019392505050565b5f60208284031215612302575f80fd5b5051919050565b5f815180845260208085019450602084015f5b838110156123385781518752958201959082019060010161231c565b509495945050505050565b60ff851681525f6020851061236657634e487b7160e01b5f52602160045260245ffd5b846020830152608060408301526123806080830185612309565b82810360608401526123928185612309565b97965050505050505056fea26469706673582212200425ca1d8fa7d9c6b282e13f2220a71b55fb837861cfb6fce9e47db2d33213ba64736f6c63430008190033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "batchCalculateSimilarity(address[])": {
        "details": "Batch similarity calculation for multiple users",
        "params": {
          "targets": "Array of user addresses to calculate similarity with"
        },
        "returns": {
          "requestIds": "Array of match request IDs for each target"
        }
      },
      "calculateSimilarity(address)": {
        "details": "Calculate similarity between two users using encrypted bitwise operations",
        "params": {
          "targetUser": "Address of the user to compare with"
        },
        "returns": {
          "requestId": "The ID of the match request"
        }
      },
      "deleteProfile()": {
        "details": "Emergency function to remove a user's profile"
      },
      "getAllUsers()": {
        "details": "Get all registered users",
        "returns": {
          "_0": "Array of all user addresses"
        }
      },
      "getMatchCount(address)": {
        "details": "Get match count for a user",
        "params": {
          "user": "Address to check"
        },
        "returns": {
          "_0": "Number of matches"
        }
      },
      "getMatchRequest(bytes32)": {
        "details": "Get match request details",
        "params": {
          "requestId": "The request ID"
        },
        "returns": {
          "decryptedScore": "The decrypted similarity score",
          "isMatch": "Whether the match result is true",
          "matchDecrypted": "Whether the match result has been decrypted",
          "processed": "Whether the match request has been processed",
          "requester": "The address of the requester",
          "scoreDecrypted": "Whether the similarity score has been decrypted",
          "target": "The address of the target",
          "timestamp": "The timestamp of the match request"
        }
      },
      "getMyMatches()": {
        "details": "Get user's matches (only callable by the user themselves)",
        "returns": {
          "_0": "Array of addresses that matched with the caller"
        }
      },
      "getTotalUsers()": {
        "details": "Get total number of registered users",
        "returns": {
          "_0": "Total user count"
        }
      },
      "hasProfile(address)": {
        "details": "Check if a user has a profile",
        "params": {
          "user": "Address to check"
        },
        "returns": {
          "_0": "True if user has a profile"
        }
      },
      "isAlreadyMatched(address,address)": {
        "details": "Check if two users are already matched",
        "params": {
          "user1": "First user address",
          "user2": "Second user address"
        },
        "returns": {
          "_0": "True if users are already matched"
        }
      },
      "processMatchDecryption(bytes32)": {
        "details": "Retrieve and process decrypted match result",
        "params": {
          "requestId": "The ID of the match request"
        }
      },
      "processScoreDecryption(bytes32)": {
        "details": "Retrieve and process decrypted similarity score",
        "params": {
          "requestId": "The ID of the match request"
        }
      },
      "requestMatchDecryption(bytes32)": {
        "details": "Request decryption of match result (whether users match)",
        "params": {
          "requestId": "The ID of the match request"
        }
      },
      "requestScoreDecryption(bytes32)": {
        "details": "Request decryption of similarity score",
        "params": {
          "requestId": "The ID of the match request"
        }
      },
      "submitProfile((uint256,uint8,uint8,bytes))": {
        "details": "Submit user profile with encrypted interests bitmap",
        "params": {
          "encryptedInterests": "8-bit encrypted bitmap representing user's interests"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22229,
        "contract": "contracts/BlindMatch.sol:BlindMatch",
        "label": "profiles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(UserProfile)22201_storage)"
      },
      {
        "astId": 22234,
        "contract": "contracts/BlindMatch.sol:BlindMatch",
        "label": "matchRequests",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(MatchRequest)22224_storage)"
      },
      {
        "astId": 22237,
        "contract": "contracts/BlindMatch.sol:BlindMatch",
        "label": "allUsers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UserProfile)22201_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BlindMatch.UserProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(UserProfile)22201_storage"
      },
      "t_mapping(t_bytes32,t_struct(MatchRequest)22224_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BlindMatch.MatchRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(MatchRequest)22224_storage"
      },
      "t_struct(MatchRequest)22224_storage": {
        "encoding": "inplace",
        "label": "struct BlindMatch.MatchRequest",
        "members": [
          {
            "astId": 22203,
            "contract": "contracts/BlindMatch.sol:BlindMatch",
            "label": "requester",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 22205,
            "contract": "contracts/BlindMatch.sol:BlindMatch",
            "label": "target",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 22208,
            "contract": "contracts/BlindMatch.sol:BlindMatch",
            "label": "similarityScore",
            "offset": 0,
            "slot": "2",
            "type": "t_userDefinedValueType(euint8)20"
          },
          {
            "astId": 22210,
            "contract": "contracts/BlindMatch.sol:BlindMatch",
            "label": "scoreDecrypted",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 22212,
            "contract": "contracts/BlindMatch.sol:BlindMatch",
            "label": "decryptedScore",
            "offset": 1,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 22214,
            "contract": "contracts/BlindMatch.sol:BlindMatch",
            "label": "processed",
            "offset": 2,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 22216,
            "contract": "contracts/BlindMatch.sol:BlindMatch",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 22219,
            "contract": "contracts/BlindMatch.sol:BlindMatch",
            "label": "isMatchEncrypted",
            "offset": 0,
            "slot": "5",
            "type": "t_userDefinedValueType(ebool)18"
          },
          {
            "astId": 22221,
            "contract": "contracts/BlindMatch.sol:BlindMatch",
            "label": "matchDecrypted",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 22223,
            "contract": "contracts/BlindMatch.sol:BlindMatch",
            "label": "isMatch",
            "offset": 1,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(UserProfile)22201_storage": {
        "encoding": "inplace",
        "label": "struct BlindMatch.UserProfile",
        "members": [
          {
            "astId": 22192,
            "contract": "contracts/BlindMatch.sol:BlindMatch",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 22195,
            "contract": "contracts/BlindMatch.sol:BlindMatch",
            "label": "interestsBitmap",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(euint8)20"
          },
          {
            "astId": 22198,
            "contract": "contracts/BlindMatch.sol:BlindMatch",
            "label": "matches",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 22200,
            "contract": "contracts/BlindMatch.sol:BlindMatch",
            "label": "profileCreatedAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_userDefinedValueType(ebool)18": {
        "encoding": "inplace",
        "label": "ebool",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(euint8)20": {
        "encoding": "inplace",
        "label": "euint8",
        "numberOfBytes": "32"
      }
    }
  }
}